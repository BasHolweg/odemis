# Microscope file which uses multiple parents for a component:
# * one parent (Cam) creates the component (Cam focus)
# * one parent (Stage) uses the component

# It also has a cycle in affect/children: 
# Cam.children = [Cam focus]
# Cam focus.affects = Cam

Test: {
    class: Microscope,
    role: optical,
    emitters: ["Spectra"],
    detectors: ["Cam"],
    actuators: ["Stage"],
}

Spectra: {
    class: lle.FakeLLE,
    role: light,
    init: {
        port: "/dev/ttyLLE",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        sources: {"red": [615.e-9, 625.e-9, 633.e-9, 640.e-9, 650.e-9],
                  "green": [525.e-9, 540.e-9, 550.e-9, 555.e-9, 560.e-9],
                  "cyan": [455.e-9, 465.e-9, 475.e-9, 485.e-9, 495.e-9],
                  "UV": [375.e-9, 390.e-9, 400.e-9, 402.e-9, 405.e-9],
                  "yellow": [565.e-9, 570.e-9, 575.e-9, 580.e-9, 595.e-9],
                  "blue": [420.e-9, 430.e-9, 438.e-9, 445.e-9, 455.e-9],
                  "teal": [495.e-9, 505.e-9, 513.e-9, 520.e-9, 530.e-9],
                 }
        },
    affects: ["Cam"],
}

"Cam": {
    class: simcam.Camera,
    role: ccd,
    children: {
        focus: "Cam focus",
    },
    init: {
        image: "simcam-fake-overview.h5", # RGB 8-bits
    },
}

"Cam focus": {
    creator: Cam, # Needs to be explicit as Stage also uses this component
    role: focus,
    #affects: ["Cam"], # FIXME: doesn't work because it refers to its parent
}

# Using Z as X doesn't make sense, but it makes it easy for testing
"Stage": {
    class: CombinedActuator,
    role: stage,
    # affects: ["Cam"],
    children: {"x": "Cam focus", "y": "Second Axis"},
    init: {
        axes_map: {"x": "z", "y": "y"},
    },
}

"Second Axis": {
    class: simulated.Stage,
    role: none,
    init: {axes: ["y"]},
}

