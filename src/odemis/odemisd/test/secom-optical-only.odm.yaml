SECOM: {
    class: Microscope,
    role: brightfield,
    emitters: [Light, "Nikon Super Duper", "MultiBand Fixed Filter"],
    detectors: [Clara],
    actuators: ["Redstone Stage", "SEM-Optical Alignment", "OpticalZ actuator"],
}

Light: {
    class: simulated.Light,
    role: brightlight,
    affects: [Clara],
    properties: {
        power: 100 # W
    }
}

"Nikon Super Duper": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 40.0}, # ratio
    affects: [Clara]
}

"MultiBand Fixed Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[430e-9, 480e-9], [520e-9, 600e-9]]}, # m,m
    affects: [Clara]
}

Clara: {
    class: andorcam2.AndorCam2,
    role: ccd,
    init: {device: 0} # the only Andor camera connected so always 0
}

# PI RedStone jumpers (.=off):
# X,Y = 1234...8
# X => Ch1
# Y => Ch2

"Redstone Stage": {
    class: pi.StageRedStone,
    role: stage,
    affects: [Clara],
    init: {
        port: /dev/ttyS0, # serial port on the board
        # port: /dev/ttyPIRS, # USB serial port
        axes: {x: [0, 1], y: [0, 0]}, # axis -> controller, channel
    }, 
    properties: {
        speed: {'x': 0.001, 'y': 0.001} #m/s
    }
}

# Use 2 CombinedActuators to separate the axes of the PIGCS over different roles
"SEM-Optical Alignment": {
    class: CombinedActuator,
    role: align,
    affects: [Clara],
    children: {"l": PIGCS, "r": PIGCS},
    init: {
        axes_map: {"l": "l", "r": "r"},
#        inverted: ["l"]
    },
    properties: {
        speed: {'l': 0.001, 'r': 0.001} #m/s
    }
}

"OpticalZ actuator": {
    class: CombinedActuator,
    role: focus,
    affects: [Clara],
    children: {"z": PIGCS},
    init: {
        axes_map: {"z": "z"}
    },
    properties: {
        speed: {'z': 0.001} #m/s
    }
}

# PI E-861 jumpers (. = off):
# L = 1234.6..
# R = 123..6..
# Z = 12.4.6..

PIGCS: {
    class: pigcs.Bus,
    role: AlignAndFocus,
    init: {
        port: "/dev/ttyPIE",
        axes: {"l": [1, 1, False], "r": [2, 1, False], "z": [3, 1, False]} # axis -> controller, channel, closed-loop?
    },
}

