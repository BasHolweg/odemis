#!/bin/bash

. /etc/odemis.conf

export PYTHONPATH

# filename is %hostname-odemis-log-%date.zip
# Zip is nice, because it's very fast add files
bn="$(hostname)-odemis-log-$(date +%Y%m%d-%H%M%S).zip"
fn="$HOME/Desktop/$bn"


# Call the MODEL_SELECTOR if needed
if [ -z "$MODEL" -a -n "MODEL_SELECTOR" ]; then
    MODEL=("$($MODEL_SELECTOR)")
    if [ "$?" -ne 0 ]; then
       # Just pick every potential microscope models
       MODEL=("$CONFIGPATH/"*.odm.yaml)
    fi
else
    MODEL=("$MODEL") # Convert into an array of one
fi


# Compress in background
# (Only displays a warning if a file doesn't exists)
zip -jr $fn /var/log/odemis.log $HOME/odemis-gui.log $HOME/odemis-gui.log.1 "${MODEL[@]}" /etc/odemis.conf /var/log/syslog $HOME/odemis-mic-selector.log &


# Take a screenshot if the GUI is there
if pgrep -f $GUI > /dev/null; then
    scfn="/tmp/odemis-bug-screenshot.png"
    gm import -window root "$scfn"
    # Only available in Ubuntu 14.04+ (a bit better because you see a "flash")
    # gnome-screenshot -f "$scfn"
else
    scfn=""
fi

# Save hw status (if available)
# TODO: also do this in background (especially, it can block for a long time if
# the backend is in some weird state)
odemis-cli --check
status=$?
if [ $status -eq 0 -o $status -eq 3 ] ; then
    hwfn="/tmp/odemis-hw-status.txt"
    timeout -k 10 60 odemis-cli --list-prop '*' > "$hwfn" &
else
    hwfn=""
fi


# TODO: auto-complete contact person from the last bug report?
# Ask to describe the problem (in the mean time)
descfn="/tmp/description.txt"
zenity --text-info --editable --width 800 --height 800 --title "Enter problem description" >"$descfn" <<EOL
Summary of the problem:

Contact person (name and email address):

Ways to reproduce the problem:
1.
2.
3.
:

Current behaviour:

Expected behaviour:


Additional information (eg, reproducibility, severity):

EOL
ret="$?"

# wait for zip to be done
echo "Waiting for zip to be done..."
wait

if [ "$ret" -eq 1 ]; then # cancelled
    rm $fn
    exit
fi


# Add the latest overlay-report if it's possibly related (ie, less than a day old)
LAST_OVERLAY_REP=$(ls -dt ~/odemis-overlay-report/* | head -1)
if [ -n "$LAST_OVERLAY_REP" ]; then
    if [ $(find "$LAST_OVERLAY_REP" -maxdepth 0 -mtime +1 | wc -l) -gt 0 ]; then
       LAST_OVERLAY_REP="" # Too old
    fi
fi

# Add the latest DELPHI calibration report if it's possibly related (ie, less than a day old)
LAST_DELPHI_CALIB_REP=$(ls -dt ~/delphi-calibration-report/* | head -1)
if [ -n "$LAST_DELPHI_CALIB_REP" ]; then
    if [ $(find "$LAST_DELPHI_CALIB_REP" -maxdepth 0 -mtime +1 | wc -l) -gt 0 ]; then
       LAST_DELPHI_CALIB_REP="" # Too old
    fi
fi

# Add the description, other files generated during entry, and folders (which are
# add recursively, and not added at all if they don't exist)
# (no quotes for the variables which could be empty so they become nothing)
# On 16.04, with the latest file-roller, you can just do this:
#file-roller --add "$descfn" $hwfn $scfn ~/.config/odemis/ $LAST_OVERLAY_REP $LAST_DELPHI_CALIB_REP --add-to "$fn"

# Adds each directory into the root of the archive
pushd .
for d in ~/.config/odemis/ $LAST_OVERLAY_REP $LAST_DELPHI_CALIB_REP; do
    cd $(dirname $d)
    zip -r $fn $(basename $d)
done
popd
file-roller --add "$descfn" $hwfn $scfn  --add-to "$fn"


# TODO: any way to automatically send the file?
# See https://github.com/predat/wetransferpy

zenity --info --text "Please send the file <tt>$bn</tt> on the Desktop to <tt>bugreport@delmic.com</tt>.\n\nYou can use http://delmic.wetransfer.com ." --title "Problem report ready" --no-wrap
if [ $? == 0 ]; then # User pressed OK (and not closed the window)
    # Open wetransfer

    # Encode the (first 30 lines of) description into URL encoding for passing it also as message
    msgu=$(head -n 30 "$descfn" | python2 -c "import sys, urllib; print urllib.quote_plus(sys.stdin.read())")

    firefox "https://delmic.wetransfer.com/?to=bugreport@delmic.com&msg=$msgu"
fi


