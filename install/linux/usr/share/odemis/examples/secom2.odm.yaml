SECOMv2: {
    class: Microscope,
    role: secom,
    emitters: [Spectra, "Nikon Lens", "MultiBand Fixed Filter", "EBeam ExtXY"],
    detectors: [Zyla, "SED ExtXY"],
    actuators: ["Sample stage", "Optical stage", "Optical focus", "EBeam Focus"],
}

Spectra: {
    class: lle.FakeLLE,
    role: light,
    init: {
        port: "/dev/ttyFTDI*",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        # Values are quite approximate (only centre is pretty sure)
        sources: {"UV": [372.e-9, 382.e-9, 390.e-9, 398.e-9, 408.e-9],
                  "cyan": [465.e-9, 475.e-9, 485.e-9, 495.e-9, 505.e-9],
                  "green": [535.e-9, 545.e-9, 560.e-9, 575.e-9, 585.e-9],
                  "red": [637.e-9, 645.e-9, 650.e-9, 655.e-9, 663.e-9],
                 }
        },
    affects: [Zyla],
}

"SEM ExtXY": {
    class: simsem.SimSEM,
    role: none,
    init: {
           image: "simsem-fake-output.h5", # any large 16 bit image is fine
           drift_period: 5, # s, comment out to disable drift
    },
    children: {scanner: "EBeam ExtXY",
               detector0: "SED ExtXY",
               focus: "EBeam Focus",
    }
}

"EBeam ExtXY": {
    # Internal child of SimSEM, so no class
    role: e-beam,
    init: {},
    properties: {
        dwellTime: 10.e-6, # s
    },
    affects: ["SED ExtXY", Zyla] # affects the CCD in case of cathodoluminescence
}

"SED ExtXY": { # aka ETD
    # Internal child of SimSEM, so no class
    role: se-detector,
    init: {},
}

"EBeam Focus": {
    # Internal child of SimSEM, so no class
    role: ebeam-focus,
}

"Nikon Lens": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 60.0}, # ratio (actually of the complete light path)
    affects: [Zyla]
}

# Semrock FF01-440/521/607/700
"MultiBand Fixed Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[420.e-9, 460.e-9],
                  [510.e-9, 532.e-9],
                  [590.e-9, 624.e-9],
                  [677.e-9, 723.e-9]]}, # m,m
    affects: [Zyla]
}

# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
Zyla: {
    class: andorcam3.AndorCam3,
    role: ccd,
    init: {
        device: 0, # the only Andor camera connected so always 0
        transpose: [2, -1], # rotation by 90°
    },
    properties: {
        exposureTime: 0.3, # s
        # targetTemperature: -40, # °C
    }
}

# Use 3 MultiplexActuators to separate the axes of the PIGCS over different roles

# Axes should be synchronized with the camera
# Stage axes are moving the sample, so they should opposite direction than convention
# (so the stage "position" is the current position observed)
"Sample stage": {
    class: actuator.MultiplexActuator,
    role: stage,
    affects: [Zyla, "EBeam ExtXY"],
    children: {"x": PIGCS, "y": PIGCS},
    init: {
        axes_map: {"x": "sx", "y": "sy"},
    },
}

# FIXME: these axes need to be renamed to x, y (but the GUI is sad without A/B for now)
"Optical stage": {
    class: actuator.MultiplexActuator,
    role: align,
    affects: [Zyla],
    children: {"a": PIGCS, "b": PIGCS},
    init: {
        axes_map: {"a": "ox", "b": "oy"},
    },
}

# Axis Z: (Physical) bottom->top when looking at the door
#         (On screen) bottom->top (so distance to sample is smaller when going up)
"Optical focus": {
    class: actuator.MultiplexActuator,
    role: focus,
    affects: [Zyla],
    children: {"z": PIGCS},
    init: {
        axes_map: {"z": "oz"}
    },
}

# Network should be set up and the C-863 should be configured for DHCP.
# Each E-861 should be configured for the right stage.
# PI E-861 addresses and stage configuration:
# stage X = 1 (??1 closed loop)
# stage Y = 2 (??1 closed loop)
# optical X = 3 (??2 open loop)
# optical Y = 4 (??2 open loop)
# optical Z = 5 (??1 closed loop)

PIGCS: {
    class: pigcs.Bus,
    role: none,
    init: {
        port: "autoip", # put "autoip" or the IP address (if fixed)
        # axis -> controller, channel, closed-loop?
        # FIXME: for now the controllers are not properly configured and not connected
        # to the encoder, so only open loop
#        axes: {"sx": [1, 1, True], "sy": [2, 1, True],
#               "ox": [3, 1, False], "oy": [4, 1, False],
#               "oz": [5, 1, True]},
        axes: {"sx": [1, 1, False], "sy": [2, 1, False],
               "ox": [3, 1, False], "oy": [4, 1, False],
               "oz": [5, 1, False]},
        inverted: ["ox", "oy", "oz"], # TODO: check stage X/Y
        #dist_to_steps: {"sx": 100000, "sy": 100000}, # step/m
    },
}

