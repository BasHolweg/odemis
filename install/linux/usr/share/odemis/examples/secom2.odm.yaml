SECOMv2: {
    class: Microscope,
    role: secom,
    emitters: ["Light Engine", "Optical Objective", "Optical Emission Filter", "SEM E-beam"],
    detectors: ["Camera", "SEM Detector"],
    actuators: ["Sample Stage", "Objective Stage", "Optical Focus", "SEM Focus"],
}

"Light Engine": {
    class: lle.FakeLLE,
    role: light,
    init: {
        port: "/dev/ttyFTDI*",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        # Values are from vendor: http://lumencor.com/products/filters-for-spectra-x-light-engines/
        sources: {"UV": [379.e-9, 384.e-9, 390.e-9, 396.e-9, 401.e-9], # 390/22
                  "cyan": [472.e-9, 479.e-9, 485.e-9, 491.e-9, 497.e-9], # 485/25
                  "green": [544.e-9, 552.e-9, 560.e-9, 568.e-9, 576.e-9], # 560/32
                  "red": [638.e-9, 643.e-9, 648.e-9, 653.e-9, 658.e-9], # 648/20
                 }
        },
        # The light is reflected via a Semrock FF410/504/582/669-DI01-25X36
    affects: ["Camera"],
}

"SEM Scan Interface": {
    class: simsem.SimSEM,
    role: none,
    init: {
           image: "simsem-fake-output.h5", # any large 16 bit image is fine
           drift_period: 5, # s, comment out to disable drift
    },
    children: {scanner: "SEM E-beam",
               detector0: "SEM Detector",
               focus: "SEM Focus",
    }
}

"SEM E-beam": {
    # Internal child of SimSEM, so no class
    role: e-beam,
    init: {},
    properties: {
        dwellTime: 10.e-6, # s
    },
    affects: ["SEM Detector", "Camera"] # affects the CCD in case of cathodoluminescence
}

"SEM Detector": { # aka ETD
    # Internal child of SimSEM, so no class
    role: se-detector,
    init: {},
}

"SEM Focus": {
    # Internal child of SimSEM, so no class
    role: ebeam-focus,
}

"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 60.0}, # ratio (actually of the complete light path)
    affects: ["Camera"]
}

# Semrock FF01-440/521/607/700
"Optical Emission Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[420.e-9, 460.e-9],
                  [510.e-9, 532.e-9],
                  [590.e-9, 624.e-9],
                  [677.e-9, 723.e-9]]}, # m,m
    affects: ["Camera"]
}

# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
"Camera": {
    class: andorcam3.AndorCam3,
    role: ccd,
    init: {
        device: 0, # the only Andor camera connected so always 0
        transpose: [2, -1], # rotation by 90°
    },
    properties: {
        exposureTime: 0.3, # s
        # targetTemperature: -40, # °C
    }
}

# Use 3 MultiplexActuators to separate the axes of the PIGCS over different roles

# Axes should be synchronized with the camera
# Stage axes are moving the sample, so they should opposite direction than convention
# (so the stage "position" is the current position observed)
"Sample Stage": {
    class: actuator.MultiplexActuator,
    role: stage,
    affects: ["Camera", "SEM E-beam"],
    children: {"x": "Stage Actuators", "y": "Stage Actuators"},
    init: {
        axes_map: {"x": "sx", "y": "sy"},
    },
}

"Objective Stage": {
    class: actuator.MultiplexActuator,
    role: align,
    affects: ["Camera"],
    children: {"x": "Stage Actuators", "y": "Stage Actuators"},
    init: {
        axes_map: {"x": "ox", "y": "oy"},
    },
}

# Axis Z: (Physical) bottom->top when looking at the door
#         (On screen) bottom->top (so distance to sample is smaller when going up)
"Optical Focus": {
    class: actuator.MultiplexActuator,
    role: focus,
    affects: ["Camera"],
    children: {"z": "Stage Actuators"},
    init: {
        axes_map: {"z": "oz"}
    },
}

# Network should be set up and the C-863 should be configured for DHCP.
# Each E-861 should be configured for the right stage.
# PI E-861 addresses and stage configuration:
# optical X = 1 (open loop)
# optical Y = 2 (open loop)
# optical Z = 3 (closed loop)
# stage X = 4 (closed loop)
# stage Y = 5 (closed loop)

"Stage Actuators": {
    class: pigcs.Bus,
    role: none,
    init: {
        port: "autoip", # put "autoip" or the IP address (if fixed)
        # axis -> controller, channel, closed-loop?
        axes: {"ox": [1, 1, False], "oy": [2, 1, False],
               "oz": [3, 1, True],
               "sx": [4, 1, True], "sy": [5, 1, True]},
        inverted: ["ox", "oy", "oz"], # sx is good, TODO: check stage Y
        #dist_to_steps: {"ox": 100000, "oy": 100000}, # step/m
    },
}
