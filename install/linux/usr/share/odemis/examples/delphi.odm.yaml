DELPHI: {
    class: Microscope,
    role: delphi,
    emitters: ["Spectra", "Nikon Lens", "MultiBand Filter", "EBeam Phenom"],
    detectors: ["Zyla", "BSED Phenom", "NavCam"],
    actuators: ["Stage Phenom", "Optical stage", "Optical focus",
                "Chamber Phenom", "EBeam focus", "NavCam focus", "TwinStage", "AntiBacklash Stage"],
}

Spectra: {
    class: lle.LLE,
    role: light,
    init: {
        port: "/dev/ttyFTDI*",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        # Values are quite approximate (only centre is pretty sure)
        sources: {"UV": [372.e-9, 382.e-9, 390.e-9, 398.e-9, 408.e-9],
                  "cyan": [465.e-9, 475.e-9, 485.e-9, 495.e-9, 505.e-9],
                  "green": [535.e-9, 545.e-9, 560.e-9, 575.e-9, 585.e-9],
                  "red": [637.e-9, 645.e-9, 650.e-9, 655.e-9, 663.e-9],
                 }
        },
        # The light is reflected via a Semrock FF410/504/582/669-DI01-25X36
    affects: ["Zyla"],
}

# Connection to the Phenom, which must have API access activated
"Phenom": {
    class: phenom.SEM,
    role: none,
    init: {
           #Standalone Phenom
           #host: "http://Phenom-MVE0206151080.local:8888", 
           #username: "delmic",
           #password: "6526AM9688B1",
           #Delphi
           host: "http://Phenom-MVE0217221140.local:8888", 
           username: "Delmic",
           password: "C2CS5TRY1YJ7",
    },
    children: {scanner: "EBeam Phenom",
               focus: "EBeam focus",
               detector: "BSED Phenom",
               stage: "Stage Phenom",
               navcam: "NavCam",
               navcam-focus: "NavCam focus",
               pressure: "Chamber Phenom",
    }
}

"EBeam Phenom": {
    # Internal child of SEM Phenom, so no class
    role: e-beam,
    init: {},
    affects: ["BSED Phenom", "Zyla"], # affects the CCD in case of cathodoluminescence
    properties: {
        bpp: 8,  # 8 bit per pixel by default as it has a much faster refresh rate
    },
}

"EBeam focus": {
    role: ebeam-focus,
    init: {axes: ["z"]},
    affects: ["EBeam Phenom"]
}

"BSED Phenom": {
    role: bs-detector,
    init: {}
}

"Stage Phenom": {
    creator: "Phenom", # necessary as it has multiple parents
    role: sem-stage,
    init: {},
}

"NavCam": {
    role: overview-ccd,
    init: {
        contrast: 1, # dark-field (works much better for Delphi samples)
        brightness: 0.5, # not too strong
    }
}

"NavCam focus": {
    role: overview-focus,
    init: {axes: ["z"]},
    affects: ["NavCam"]
}

"Chamber Phenom": {
    # Used to move between SEM and NavCam or to unload the sample
    role: chamber,
    init: {},
}

"Nikon Lens": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 40.0}, # ratio
    affects: ["Zyla"]
}

# Semrock FF01-440/521/607/700
"MultiBand Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[420.e-9, 460.e-9],
                  [510.e-9, 532.e-9], 
                  [590.e-9, 624.e-9],
                  [677.e-9, 723.e-9]]}, # m,m
    affects: ["Zyla"]
}

# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
"Zyla": {
    class: andorcam3.AndorCam3,
    role: ccd,
    init: {device: 0,
           transpose: [-2, -1], # rotated 90° clockwise
    },
    properties: {
        resolution: [2160, 2160],  # Crop Y axis which doesn't receive light anyway
    },
}

# Special stage that actually moves the SEM stage as requested, and the optical
# stage oppositely (based on a transformation matrix passed via metadata) to
# compensate for the lens move.
"TwinStage": {
    class: actuator.CoupledStage,
    role: stage,
    affects: ["EBeam Phenom", "Zyla"],
    init: {},
    children: {"master": "Stage Phenom", "slave": "AntiBacklash Stage"},
}

"AntiBacklash Stage": {
    class: actuator.AntiBacklashActuator,
    role: align,
    init: {
        backlash: {"x": 100.e-06, "y": 100.e-06},
    },
    children: {"slave": "Optical stage"},
}

# Use 2 MultiplexActuators to separate the axes of the TMCM over different roles
"Optical stage": {
    class: actuator.MultiplexActuator,
    role: None,
    affects: ["Zyla"],
    children: {"x": TMCM, "y": TMCM},
    init: {
        axes_map: {"x": "x", "y": "y"},
        inverted: ["x", "y"], # inverted so it moves oppositely to the SEM stage
    },
}

# Axis Z: (Physical) bottom->top when looking at the door
#         (On screen) bottom->top (so distance to sample is smaller when going up)    
"Optical focus": {
    class: actuator.MultiplexActuator,
    role: focus,
    affects: ["Zyla"],
    children: {"z": TMCM},
    init: {
        axes_map: {"z": "z"}
    },
}

# Controller for the X, Y, Z axes of the optical lens
TMCM: {
    class: tmcm.TMCM3110,
    role: none,
    init: {
        port: "/dev/ttyTMCM0",
        #port: "/dev/fake",
        axes: ["x", "y", "z"],
        ustepsize: [5.9e-9, 5.9e-9, 5.e-9], # m/µstep
        #refproc: "FakeReferencing", # referencing procedure for simulator
        refproc: "2xFinalForward", # official referencing procedure for the Delphi
        temp: True,
        # inverted: ["y"],
    },
}

