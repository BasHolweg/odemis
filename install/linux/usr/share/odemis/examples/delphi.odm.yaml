# This is for a Delphi 2016
DELPHI: {
    class: Microscope,
    role: delphi,
    children: ["Light Engine", "Optical Objective", "Optical Emission Filter",
               "EBeam Phenom", "Camera", "BSED Phenom", "NavCam", "Stage Phenom",
               "Objective Stage", "Optical Focus", "Chamber Phenom", "EBeam focus",
               "NavCam focus", "TwinStage", "AntiBacklash Stage",
               "AntiBacklash Focus"],
}

# LedHub
"Light Engine": {
    class: omicronxx.HubxX,
    role: light,
    init: {
        port: "/dev/ttyFTDI*",
    },
    # The light is reflected via a Semrock FF410/504/582/669-DI01-25X36
    affects: ["Camera"],
}

# Connection to the Phenom, which must have API access activated
"Phenom": {
    class: phenom.SEM,
    role: none,
    init: {
           # TODO: change to the Delphi correct password and serial number
           host: "http://Phenom-MVE0217221140.local:8888", 
           username: "Delmic",
           password: "C2CS5TRY1YJ7",
    },
    children: {scanner: "EBeam Phenom",
               focus: "EBeam focus",
               detector: "BSED Phenom",
               stage: "Stage Phenom",
               navcam: "NavCam",
               navcam-focus: "NavCam focus",
               pressure: "Chamber Phenom",
    }
}

"EBeam Phenom": {
    # Internal child of SEM Phenom, so no class
    role: e-beam,
    init: {},
    properties: {
        # spotSize: 2.1,  # Mostly to make sure it doesn't default to some weird value
        # accelVoltage: 5300,  # V
    },
    affects: ["BSED Phenom", "Camera"], # affects the CCD in case of cathodoluminescence
}

"EBeam focus": {
    role: ebeam-focus,
    init: {axes: ["z"]},
    affects: ["EBeam Phenom"]
}

"BSED Phenom": {
    role: bs-detector,
    init: {},
    properties: {
        bpp: 8,  # 8 bit per pixel by default as it has a much faster refresh rate
    },
}

"Stage Phenom": {
    creator: "Phenom", # necessary as it has multiple parents
    role: sem-stage,
    init: {},
}

"NavCam": {
    role: overview-ccd,
    init: {
        contrast: 1, # dark-field (works much better for Delphi samples)
        brightness: 0.5, # not too strong
    }
}

"NavCam focus": {
    role: overview-focus,
    init: {axes: ["z"]},
    affects: ["NavCam"]
}

"Chamber Phenom": {
    # Used to move between SEM and NavCam or to unload the sample
    role: chamber,
    init: {},
}

"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    init: {
       mag: 40.0, # ratio
       na: 0.95, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
    },
    affects: ["Camera"]
}

# Semrock FF01-440/521/607/700
"Optical Emission Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[420.e-9, 460.e-9],
                  [510.e-9, 532.e-9], 
                  [590.e-9, 624.e-9],
                  [677.e-9, 723.e-9]]}, # m,m
    affects: ["Camera"]
}

# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
"Camera": {
    class: andorcam3.AndorCam3,
    role: ccd,
    init: {device: 0,
           transp: [-2, -1],
    },
    properties: {
        resolution: [2160, 2160],  # Crop Y axis which doesn't receive light anyway
    },
}

# Special stage that actually moves the SEM stage as requested, and the optical
# stage oppositely (based on a transformation matrix passed via metadata) to
# compensate for the lens move.
"TwinStage": {
    class: actuator.CoupledStage,
    role: stage,
    affects: ["EBeam Phenom", "Camera"],
    init: {},
    children: {"master": "AntiBacklash Stage", "slave": "Stage Phenom"},
}

"AntiBacklash Stage": {
    class: actuator.AntiBacklashActuator,
    role: align,
    init: {
        backlash: {"x": 100.e-6, "y": 100.e-6},
    },
    children: {"slave": "Objective Stage"},
}

# Use 2 MultiplexActuators to separate the axes of the TMCM over different roles
"Objective Stage": {
    class: actuator.MultiplexActuator,
    role: None,
    affects: ["Camera"],
    children: {"x": "Sample Holder Actuators", "y": "Sample Holder Actuators"},
    init: {
        axes_map: {"x": "x", "y": "y"},
        inverted: ["x", "y"], # inverted so it moves oppositely to the SEM stage
    },
}

# Ensures the focus is always at the position requested.
# The drawback is that it causes "shaking" of the image when lowering the focus.
"AntiBacklash Focus": {
    class: actuator.AntiBacklashActuator,
    role: focus,
    init: {
        # 10µm is equivalent to 200µm on the motor, due to the focus ratio.
        # 100µm should be enough for the focus, but 200µm should also compensate
        # for the cross-talk with the Y backlash.
        backlash: {"z": 10.e-6},
    },
    children: {"slave": "Optical Focus"},
}
# Axis Z: (Physical) bottom->top when looking at the door
#         (On screen) bottom->top (so distance to sample is smaller when going up)    
"Optical Focus": {
    class: actuator.MultiplexActuator,
    role: None,
    affects: ["Camera"],
    children: {"z": "Sample Holder Actuators"},
    init: {
        axes_map: {"z": "z"}
    },
}

# Controller for the X, Y, Z axes of the optical lens
"Sample Holder Actuators": {
    class: tmcm.TMCLController,
    role: none,
    init: {
        port: "/dev/ttyTMCM*",
        #port: "/dev/fake3",
        axes: ["x", "y", "z"],
        ustepsize: [5.9e-9, 5.9e-9, 0.302e-9], # m/µstep
        #refproc: "Standard", # referencing procedure for simulator
        refproc: "2xFinalForward", # official referencing procedure for the Delphi
        temp: True,
        inverted: ["x"],
    },
}

