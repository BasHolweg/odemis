# Configuration for the SPARC v2 system
SPARC2: {
    class: Microscope,
    role: sparc2,
    children: ["SEM E-beam", "SEM Detector", "Calibration Light",
               "Optical Path Properties",
               "Camera", "Spectrometer", "CL Detector",
               "Spec Filter Wheel", "Spec CCD Flipper", "Spectrograph focus",
               "Mirror Actuators", "Mirror Actuators in XY referential",
               "Slit", "CL Selector", "CL Filter Wheel",
               "Lens1 Mover", "Lens2 Switch"],
}

# Light (lamp with known spectrum)
"Calibration Light": {
    class: light.Light,
    role: "brightlight",
    power_supplier: "Power Control Unit",
    affects: ["Camera", "Spectral Camera", "Spectrometer"],
}

"Power Control Unit": {
    class: powerctrl.PowerControlUnit,
    role: "power-control",
    init: {
        port: "/dev/ttyPMT*",
        pin_map: {"Calibration Light": 0, "CL PMT control unit": 1,
                  "Camera": 4, "Spectral Camera": 5, "Spectrograph": 6,
                  "Optical Actuators": 2},
        delay: { # Time it takes before a component is accessible
            "Calibration Light": 0, # To turn on/off the light, it's immediate
            "CL PMT control unit": 0,
            "Camera": 3,
            "Spectral Camera": 3,
            "Spectrograph": 90, # SR-193 needs a looong time to initialise
            "Optical Actuators": 1
        },
        init: { # Which component to power on from the very beginning (to save time)
            "Camera": True,
            "Spectral Camera": True,
            "Spectrograph": True,
            "Optical Actuators": True
        }
    }
}

# Quanta SEM driven via external X/Y connection, using a DAQ board
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
       detector1: "CL PMT",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        channels: [0, 1],
        limits: [[-3.1754, 3.1754], [-3.7, 3.7]],  # V
        park: [-5, -5], # V
        # Digital output port mapping on the Delmic scanning box v2:
        # 0 = Relay
        # 1 = Open drain output (Y0.0)
        # 2 = Digital Out 1
        # 3 = Digital Out 0
        # 4 = Status led
        scanning_ttl: {4: True}, # output ports -> True (indicate scanning) or False (indicate parked)
        settle_time: 5.e-6, # s
        hfw_nomag: 0.25, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 100, # (ratio)
    },
    affects: ["SEM Detector", "Camera", "Spectral Camera", "Spectrometer"] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI1/AI9 (differential)
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 1,
        limits: [-3, 3], # V
    },
}

# CL PMT: composed of the control unit + the PMT output connected to the DAQ board

# Must be connected on AI0/AI8 (differential)
"CL PMT": { # the raw detector of the PMT
    # Internal child of SEM Scan Interface, so no class but instead a creator
    creator: "SEM Scan Interface",
    role: null,
    init: {
        channel: 0,
        limits: [-2.5, 2.5], # V, with contrast reversed
    },
}

"CL PMT control unit": {
    class: pmtctrl.PMTControl,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        port: "/dev/ttyPMT*",
        prot_time: 0.0002,  # s
        prot_curr: 30.e-6,  # A
    }
}

"CL Detector": {
    class: pmtctrl.PMT,
    role: cl-detector,
    init: {
        settle_time: 0.5,  # s, time for the gain to be fully active
    },
    children: {
       "detector": "CL PMT",
       "pmt-control": "CL PMT control unit",
    },
}

# Depending exactly on the configuration, it might also be used for spectrometer
"Camera": {
    class: andorcam3.AndorCam3,
    role: ccd,
    power_supplier: "Power Control Unit",
    init: {
       device: 0,
       transp: [-1, -2], # flip both axes X and Y
    },
}

# On some configuration, there is a dedicated camera for the acquisition of the
# spectra, otherwise 'Camera' is used.
"Spectral Camera": {
    class: andorcam2.AndorCam2,
    role: sp-ccd,
    power_supplier: "Power Control Unit",
    init: {
       device: 0,
       transp: [-1, 2], # if mirrored on X axis
    },
    properties: {
        targetTemperature: -60, # °C
    },
}

# Spectrometer = Andor iVac 316 + Shamrock SR193 (connected via USB)
"Spectrometer": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer,
    children: {detector: "Spectral Camera", spectrograph: "Spectrograph"},
    properties: {
        binning: [4, 256],
    },
}

"Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph,
    power_supplier: "Power Control Unit",
    init: {
        device: 0,
        slits: {1: "slit-in", # INPUT_SIDE
        },
        bands: { # The filters in the filter-wheel
            1: [320.e-9, 400.e-9], # pos -> m,m
            2: [500.e-9, 550.e-9],
            3: [400.e-9, 450.e-9],
            4: "polariser",
            6: "pass-through"
        },
        fstepsize: 10.9e-6, # m, size of one focus step
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer"],
}

"Spectrograph focus": {
    class: actuator.MultiplexActuator,
    role: "focus",
    children: {"z": "Spectrograph"},
    init: {
        axes_map: {"z": "focus"},
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer"],
}

# Provide the mirror (aka port selector) of the spectrograph as a separate component
"Spec CCD Flipper": {
    class: actuator.FixedPositionsActuator,
    role: "spec-det-selector",
    children: {"rx": "Spectrograph"},
    init: {
        axis_name: "flip-out",
        positions: {
            0: ["Camera"],
            1.5707963267948966: ["Spectral Camera", "Spectrometer"],
        },
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer"],
}

# Provide the filter wheel of the spectrograph as a separate component
"Spec Filter Wheel": {
    class: actuator.MultiplexActuator,
    role: filter,
    children: {"band": "Spectrograph"},
    init: {
        axes_map: {"band": "band"},
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer"],
}

"Optical Path Properties": {
    class: static.OpticalLens,
    role: lens,
    # Standard mirror config
    init: {
       mag: 0.4917, # ratio
       na: 0.2, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
       pole_pos: [458, 519], # (px, px), position of the pole (aka the hole in the mirror)
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
       rotation: -1.570796326795, # rad, 90° rotation between optical axis and SEM Y axis
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer"]
}

# Controller for the motors moving the various parts of the optical box
# DIP must be configured with address 2 (= 0100000)
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        port: "/dev/ttyTMCM*",
        address: 2,
        axes: ["l1", "l2", "cl-sel", "fw", "slit"],
        # These values only need to be roughly correct
        ustepsize: [25.1e-9, 25.1e-9, 26.1e-9, 3.392e-5, 5.e-9], # m/µstep, excepted for the fw: rad/µstep
        refproc: "Standard",
        refswitch: {"l1": 0, "l2": 0, "cl-sel": 4, "fw": 4},
        inverted: ["l2"],
    },
}

# The first lens of Plate 1, able to move along the whole range
"Lens1 Mover": {
    class: actuator.MultiplexActuator,
    role: "lens-mover",
    children: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "l1"},
        ref_on_init: ["x"],
    },
    metadata: {
        # Default position of the lens (can be improved by user)
        FAV_POS_ACTIVE: {"x": 0.0226112848} # m
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer"],
}

# The second lens of Plate 1, either to working or parking position
"Lens2 Switch": {
    class: actuator.FixedPositionsActuator,
    role: "lens-switch",
    children: {"x": "Optical Actuators"},
    init: {
        axis_name: "l2",
        positions: {
            0.0031124: "on",
            -0.048192: "off", # completely out of the path
        },
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer"],
}

# Control the slit position to either fully-open or small (dependent on the spectrometer slit-in)
"Slit": {
    class: actuator.FixedPositionsActuator,
    role: "slit-in-big",
    children: {"x": "Optical Actuators"},
    init: {
        axis_name: "slit",
        positions: {
            0: "on", # fully opened
            0.0012: "off", # opening based on the small slit
        },
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer"],
}

# Mirror in Plate 2, selects between spectrometer and cl-detector
"CL Selector": {
    class: actuator.FixedPositionsActuator,
    role: "cl-det-selector",
    children: {"x": "Optical Actuators"},
    init: {
        axis_name: "cl-sel",
        positions: {
            0.003: ["CL Detector"],
            0.01: ["Spec CCD Flipper"]
        },
    },
    affects: ["Camera", "Spectral Camera", "CL Detector", "Spectrometer"],
}

"CL Filter Wheel": {
    class: actuator.FixedPositionsActuator,
    role: "cl-filter",
    children: {"band": "Optical Actuators"},
    init: {
        axis_name: "fw",
        # It supports up to 8 filters
        positions: {
            # pos (rad) -> m,m
            0: [420.e-9, 460.e-9],        # 1
            0.785398: [500.e-9, 550.e-9], # 2
            1.570796: "polariser",        # 3
            3.9269908: "pass-through",    # 6
        },
        cycle: 6.283185, # position of ref switch (0) after a full turn
    },
    affects: ["CL Detector"],
}

# Controller for moving the 'Redux' stage
# DIP must be configured with address 4 (= 0010000)
# Note: the S axis can _only_ be moved when the l axis is near the active/engaged position
"Mirror Actuators": {
    class: tmcm.TMCLController,
    role: "mirror",
    init: {
        port: "/dev/ttyTMCM*",
        address: 4,
        axes: ["s", "l"],
        ustepsize: [5.9e-9, 5.9e-9], # m/µstep
        refproc: "Standard",
        refswitch: {"s": 0, "l": 0},
    },
    metadata: {
        # Default position of the mirror engaged (will be improved during alignment)
        FAV_POS_ACTIVE: {"l": 0.069007226, "s": 0.0027454942},  # m, m
    },
}

# Internal component to convert between the referential of the mirror actuators
# and the X/Y referential of the SEM. Used by the mirror alignment functions.
"Mirror Actuators in XY referential": {
    class: actuator.ConvertStage,
    role: "mirror-xy",
    children: {"orig": "Mirror Actuators"},
    init: {
        axes: ["s", "l"], # mapped respectively to X, Y (swap to mirror axes)
        rotation: 1.04719755, # rad (= 60°)
        # Note: if you want to use absolute moves, add a "translation" too
    },
}
