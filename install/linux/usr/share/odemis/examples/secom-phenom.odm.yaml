SECOMmini: {
    class: Microscope,
    role: secommini,
    emitters: ["Spectra", "Nikon Lens", "MultiBand Filter", "EBeam Phenom"],
    detectors: ["Zyla", "SED Phenom", "NavCam"],
    actuators: ["Stage Phenom", "Optical stage", "Optical focus",
                "Chamber Phenom", "EBeam focus", "NavCam focus"],
}

Spectra: {
    class: lle.FakeLLE,
    role: light,
    init: {
        port: "/dev/ttyLLE",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        sources: {"red": [615.e-9, 625.e-9, 633.e-9, 640.e-9, 650.e-9],
                  "green": [525.e-9, 540.e-9, 550.e-9, 555.e-9, 560.e-9],
                  "cyan": [455.e-9, 465.e-9, 475.e-9, 485.e-9, 495.e-9],
                  "UV": [375.e-9, 390.e-9, 400.e-9, 402.e-9, 405.e-9],
                  "yellow": [565.e-9, 570.e-9, 575.e-9, 580.e-9, 595.e-9],
                  "blue": [420.e-9, 430.e-9, 438.e-9, 445.e-9, 455.e-9],
                  "teal": [495.e-9, 505.e-9, 513.e-9, 520.e-9, 530.e-9],
                 }
        },
    affects: ["Zyla"],
}

# Connection to the Phenom, which must have API access activated
"Phenom": {
    class: phenom.SEM,
    role: none,
    init: {
           host: "http://Phenom-MVE0206151080.local:8888", 
           username: "delmic",
           password: "6526AM9688B1",
    },
    children: {scanner: "EBeam Phenom",
               focus: "EBeam focus",
               detector: "SED Phenom",
               stage: "Stage Phenom",
               camera: "NavCam",
               navcam-focus: "NavCam focus",
               pressure: "Chamber Phenom",
    }
}

"EBeam Phenom": {
    # Internal child of SEM Phenom, so no class
    role: e-beam,
    init: {},
    affects: ["SED Phenom", "Zyla"] # affects the CCD in case of cathodoluminescence
}

"EBeam focus": {
    role: ebeam-focus,
    init: {axes: ["z"]},
    affects: ["Zyla", "EBeam Phenom"]
}

"SED Phenom": { # aka ETD
    role: se-detector,
    init: {}
}

"Stage Phenom": {
    role: stage,
    init: {},
    affects: ["EBeam Phenom"]
}

"NavCam": {
    role: overview-ccd,
    init: {}
}

"NavCam focus": {
    role: overview-focus,
    init: {axes: ["z"]},
    affects: ["NavCam"]
}

"Chamber Phenom": {
    # Used to move between SEM and NavCam or to unload the sample
    role: chamber,
    init: {},
}

"Nikon Lens": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 60.0}, # ratio
    affects: ["Zyla"]
}

"MultiBand Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[420.e-9, 460.e-9],
                  [510.e-9, 532.e-9], 
                  [590.e-9, 624.e-9],
                  [677.e-9, 723.e-9]]}, # m,m
    affects: ["Zyla"]
}

# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
"Zyla": {
    class: andorcam2.FakeAndorCam2,
    role: ccd,
    init: {device: 0,
           transpose: [-2, 1], # rotated 90° clockwise
           image: "andorcam2-fake-clara.tiff", # only for simulator
    },
}

# Use 2 CombinedActuators to separate the axes of the TMCM over different roles
"Optical stage": {
    class: CombinedActuator,
    role: align,
    affects: ["Zyla"],
    children: {"x": TMCM, "y": TMCM},
    init: {
        axes_map: {"x": "x", "y": "y"},
    },
}

# Axis Z: (Physical) bottom->top when looking at the door
#         (On screen) bottom->top (so distance to sample is smaller when going up)    
"Optical focus": {
    class: CombinedActuator,
    role: focus,
    affects: ["Zyla"],
    children: {"z": TMCM},
    init: {
        axes_map: {"z": "z"}
    },
}

# Controller for the X, Y, Z axes of the optical lens
TMCM: {
    class: tmcm.TMCM3110,
    role: none,
    init: {
        port: "/dev/fake",
        axes: ["x", "y", "z"],
        ustepsize: [1.0e-6, 1.2e-6, 0.9e-6], # m/µstep
        # inverted: ["y"],
    },
}

