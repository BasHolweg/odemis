# Configuration for a simulated SPARC v2 system
SPARC2: {
    class: Microscope,
    role: sparc2,
    children: ["SEM E-beam", "SEM Detector",
               "Optical Path Properties",
               "Camera", "Spectrometer", "CL Detector",
               "Spec Filter Wheel", "Spec CCD Flipper",
               "Mirror Actuators", "Slit",
               "CL Selector", "CL Filter Wheel",
               "Lens1 Mover", "Lens2 Switch"],
}

# Light (lamp with known spectrum)
"Calibration Light": {
    class: simulated.Light,
    role: "calib-light",
    power_supplier: "Power Control Unit",
    affects: ["Camera"],
}

"Power Control Unit": {
    class: powerctrl.PowerControlUnit,
    role: "power-control",
    init: {
        port: "/dev/fake", # for simulator
        pin_map: {"Calibration Light": 0, "CL PMT control unit": 1,
                 "Camera": 2, "Spectral Camera": 3, "Spectrograph": 4,
                 "Optical Actuators": 7},
        powered: ["Calibration Light", "CL PMT control unit",
                  "Camera", "Spectral Camera", "Spectrograph",
                  "Optical Actuators"]
    }
}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
       detector1: "CL PMT",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        channels: [1, 0],
        limits: [[0, 5], [0, 5]],  # V
        park: [0, 0], # V
        settle_time: 5.e-6, # s
        hfw_nomag: 0.25, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 100, # (ratio)
    },
    affects: ["SEM Detector", "Spectrometer", "Angular Camera"] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI 0/AI GND
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-3, 3] # V
    },
}

# CL PMT: composed of the control unit + the PMT output connected to the DAQ board

# Must be connected on AI 1/AI GND
"CL PMT": { # the raw detector of the PMT
    # Internal child of SEM Scan Interface, so no class but instead a creator
    creator: "SEM Scan Interface",
    role: null,
    init: {
        channel: 1, # 0-> sawtooth waves, 1-> square waves
        limits: [3, 0], # V, with contrast reversed
    },
}

"CL PMT control unit": {
    class: pmtctrl.PMTControl,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        port: "/dev/fake", # for simulator
        prot_time: 0.0002,  # s
        prot_curr: 50.e-6,  # A
    }
}

"CL Detector": {
    class: pmtctrl.PMT,
    role: cl-detector,
    children: {
       "detector": "CL PMT",
       "pmt-control": "CL PMT control unit",
    },
}

# In reality, this is a Zyla, but you need libandor3-dev to simulate an AndorCam3
# Depending exactly on the configuration, it might also be used for spectrometer
"Camera": {
    class: andorcam2.AndorCam2,
    role: ccd,
    power_supplier: "Power Control Unit",
    init: {
       device: "fake",
       image: "sparc-ar-mirror-align.h5", # only for simulator
    },
}

# On some configuration, there is a dedicated camera for the acquisition of the
# spectra, otherwise 'Camera' is used.
"Spectral Camera": {
    class: andorcam2.AndorCam2,
    role: sp-ccd,
    power_supplier: "Power Control Unit",
    init: {
       device: "fake",
       transpose: [1, -2], # if mirrored on X axis (due to a Odemis bug, it's the second dim which has the -)
    },
    properties: {
        targetTemperature: -60, # °C
    },
}

# Spectrometer = Andor iVac 316 + Shamrock SR193 (connected via USB)
"Spectrometer": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer,
    children: {detector: "Spectral Camera", spectrograph: "Spectrograph"},
    properties: {
        binning: [4, 16],
    },
}

"Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph,
    power_supplier: "Power Control Unit",
    children: {"ccd": "Spectral Camera"},
    init: {
        device: "fake",
        slits: {1: "slit-in", # INPUT_SIDE
        },
        bands: { # The filters in the filter-wheel
            1: [320.e-9, 400.e-9], # pos -> m,m
            2: [500.e-9, 550.e-9],
            3: [400.e-9, 450.e-9],
            4: "polariser",
            6: "pass-through"
        },
    },
    affects: ["Camera", "Spectral Camera"],
}

# Provide the mirror (aka port selector) of the spectrograph as a separate component
"Spec CCD Flipper": {
    class: actuator.MultiplexActuator,
    role: "spec-det-selector",
    children: {"rx": "Spectrograph"},
    init: {
        axes_map: {"rx": "flip-out"},
    },
    affects: ["Camera", "Spectral Camera"],
}

# Provide the filter wheel of the spectrograph as a separate component
"Spec Filter Wheel": {
    class: actuator.MultiplexActuator,
    role: filter,
    children: {"band": "Spectrograph"},
    init: {
        axes_map: {"band": "band"},
    },
    affects: ["Camera", "Spectral Camera"],
}

"Optical Path Properties": {
    class: static.OpticalLens,
    role: lens,
    # Standard mirror config
    init: {
       mag: 0.4917, # ratio
       na: 0.2, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
       pole_pos: [458, 519], # (px, px), position of the pole (aka the hole in the mirror)
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
    },
    affects: ["Camera"]
}

# Controller for the motors moving the various parts of the optical box
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        port: "/dev/fake6",
        address: null,
        axes: ["l1", "l2", "cl-sel", "fw", "slit"],
        # These values only need to be roughly correct
        ustepsize: [25.1e-9, 25.1e-9, 26.1e-9, 3.392e-5, 5.e-9], # m/µstep, excepted for the fw: rad/µstep
        refproc: "Standard",
        refswitch: {"l1": 0, "l2": 0, "cl-sel": 4, "fw": 4},
        inverted: ["l2"],
    },
}

# The first lens of Plate 1, able to move along the whole range
"Lens1 Mover": {
    class: actuator.MultiplexActuator,
    role: "lens-mover",
    children: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "l1"}
    },
    affects: ["Camera", "Spectral Camera"],
}

# The second lens of Plate 1, either to working or parking position
"Lens2 Switch": {
    class: actuator.FixedPositionsActuator,
    role: "lens-switch",
    children: {"x": "Optical Actuators"},
    init: {
        axis_name: "l2",
        positions: {
            -4.e-3: "on",
            -0.045: "off", # completely out of the path
        },
    },
    affects: ["Camera", "Spectral Camera"],
}

# Control the slit position to either fully-open or small (dependent on the spectrometer slit-in)
"Slit": {
    class: actuator.FixedPositionsActuator,
    role: "slit-in-big",
    children: {"x": "Optical Actuators"},
    init: {
        axis_name: "slit",
        positions: {
            0: "on", # fully opened
            -0.0012: "off", # opening based on the small slit
        },
    },
    affects: ["Camera", "Spectral Camera"],
}

# Mirror in Plate 2, selects between spectrometer and cl-detector
"CL Selector": {
    class: actuator.FixedPositionsActuator,
    role: "cl-det-selector",
    children: {"x": "Optical Actuators"},
    init: {
        axis_name: "cl-sel",
        positions: {
            0: "on",
            0.01: "off"
        },
    },
    affects: ["Camera", "Spectral Camera", "CL Detector"],
}

"CL Filter Wheel": {
    class: actuator.FixedPositionsActuator,
    role: "cl-filter",
    children: {"band": "Optical Actuators"},
    init: {
        axis_name: "fw",
        # It supports up to 8 filters
        positions: {
            # pos (rad) -> m,m
            0: [420.e-9, 460.e-9],        # 1
            0.785398: [500.e-9, 550.e-9], # 2
            1.570796: "polariser",        # 3
            3.9269908: "pass-through",    # 5
        },
        cycle: 6.283185, # position of ref switch (0) after a full turn
    },
    affects: ["CL Detector"],
}

# Controller for moving the 'Redux' stage
"Mirror Actuators": {
    class: tmcm.TMCLController,
    role: "mirror",
    init: {
        port: "/dev/fake6",
        address: null,
        axes: ["y", "x"],
        ustepsize: [5.9e-9, 5.9e-9], # m/µstep
        refproc: "Standard",
    },
}

# Controller for moving the 'Deltabot' stage
# "Mirror Actuators": {
#     class: tmcm.TMCLController,
#     role: mirror,
#     init: {
#         port: "/dev/fake",
#         axes: ["a", "b", "c"],
#         ustepsize: [5.9e-9, 5.9e-9, 5.9e-9], # m/µstep
#         refproc: "Standard",
#     },
#}
