SECOMv2: {
    class: Microscope,
    role: secom,
    children: [
        "SEM E-beam full", "EBeam Focus", "SEM Detector",
        "Light Engine", "Optical Objective", "Optical Emission Filter",
        "Objective Stage", "Optical Focus", "Camera",
        "Sample Stage",
    ],
}

"Light Engine": {
     class: lle.FakeLLE,
     role: light,
     init: {
         port: "/dev/ttyFTDI*",
         # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
         # Values are from vendor: http://lumencor.com/products/filters-for-spectra-x-light-engines/
         sources: {"UV": [379.e-9, 384.e-9, 390.e-9, 396.e-9, 401.e-9], # 390/22
                   "cyan": [472.e-9, 479.e-9, 485.e-9, 491.e-9, 497.e-9], # 485/25
                   "green": [544.e-9, 552.e-9, 560.e-9, 568.e-9, 576.e-9], # 560/32
                   "red": [638.e-9, 643.e-9, 648.e-9, 653.e-9, 658.e-9], # 648/20
                  }
         },
     # The light is reflected via a Semrock FF410/504/582/669-DI01-25X36
     affects: ["Camera"],
}

# Merges the scan interface e-beam and the e-beam control (via API)
"SEM E-beam full": {
    class: scanner.CompositedScanner,
    role: e-beam,
    dependencies: {external: "SEM E-beam", internal: "EBeam control"},
    init: {},
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
    },
    affects: ["SEM Detector", "Camera"] # affects the CCD in case of cathodoluminescence
}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM Scan Interface, so no class
    role: null,
    init: {
        channels: [0, 1],
        max_res: [4096, 3072], #px, to force a 4:3 ratio
        limits: [[-3.70, 3.68], [-3.6, 3]],  # V
        park: [-4.3, -4.3], # V
        # Digital output port mapping on the Delmic scanning box v2:
        # 0 = Relay
        # 1 = Open drain output (Y0.0)
        # 2 = Digital Out 1
        # 3 = Digital Out 0
        # 4 = Status led
        scanning_ttl: {0: [True, "external"], 4: True}, # output ports -> True (indicate scanning) or False (indicate parked)
        settle_time: 10.e-6, # s
        hfw_nomag: 0.3457,
    },
}

# Must be connected on AI1/AI9 (differential)
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 0,
        limits: [-2, 2], # V
    },
}

"SEM via API": {
    class: zeiss.SEM,
    role: null,
    init: {
        port: "/dev/fake",
    },
    children: {
        scanner: "EBeam control",
        focus: "EBeam Focus",
        stage: "Sample Stage",
    }
}

"EBeam control": {
    creator: "SEM via API",
    role: null,
    init: {
        hfw_nomag: 0.114,  # m, theoretical HFW if mag == 1x
    },
}

"EBeam Focus": {
    # Internal child of zeiss.SEM, so no class
    role: ebeam-focus,
}

"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    init: {
       mag: 40.0, # ratio, (actually of the complete light path)
       na: 0.95, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
    },
    affects: ["Camera"]
}

# Semrock FF01-440/521/607/700
"Optical Emission Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[420.e-9, 460.e-9],
                  [510.e-9, 532.e-9],
                  [590.e-9, 624.e-9],
                  [677.e-9, 723.e-9]]}, # m,m
    affects: ["Camera"]
}

# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
"Camera": {
    class: andorcam2.FakeAndorCam2,
    role: ccd,
    init: {
        device: 0,
        image: "andorcam2-fake-clara.tiff",
    },
    properties: {
        exposureTime: 0.3, # s
#        resolution: [1024, 1024],  # Use to crop image if sensor is too big
    }
}

# PI E-861 addresses and stage configuration:
# optical X = 1 (open loop)
# optical Y = 2 (open loop)
# optical Z = 3 (closed loop)
# stage X = 4 (closed loop)
# stage Y = 5 (closed loop)

"Stage Actuators": {
    class: pigcs.FakeBus,
    role: null,
    init: {
        port: "/dev/fake",
        # axis -> controller, channel, closed-loop
        axes: {"ox": [1, 1, False], "oy": [2, 1, False],
               "oz": [3, 1, True],
               "sx": [4, 1, True], "sy": [5, 1, True]},
        inverted: ["ox", "oy", "oz"],
        # automatically set PID to 1,0,0 to avoid vibrations after 1 s not moving
        auto_suspend: {"oz": 1, "sx": 1, "sy": 1}, # s
    },
}

# Use 3 wrappers to separate the axes of the PIGCS over different roles

# Axes should be synchronized with the camera
# Stage axes are moving the sample, so they should opposite direction than convention
# (so the stage "position" is the current position observed)
# The rotation can be used to ensure that the axes are aligned with the SEM and CCD images
# Use this command to change the rotation:
# odemis-cli --update-metadata stage ROTATION_COR -0.17452778 # rad
"Sample Stage": {
    class: actuator.ConvertStage,
    role: stage,
    children: {"orig": "Stage Actuators"},
    init: {
        axes: ["sx", "sy"], # mapped respectively to x, y
        rotation: 0.0, # rad (= 0Â°)
    },
    affects: ["Camera", "SEM E-beam"],
}

"Objective Stage": {
    class: actuator.MultiplexActuator,
    role: align,
    dependencies: {"x": "Stage Actuators", "y": "Stage Actuators"},
    init: {
        axes_map: {"x": "ox", "y": "oy"},
    },
    affects: ["Camera"],
}

# Axis Z: (Physical) bottom->top when looking at the door
#         (On screen) bottom->top (so distance to sample is smaller when going up)
"Optical Focus": {
    class: actuator.MultiplexActuator,
    role: focus,
    dependencies: {"z": "Stage Actuators"},
    init: {
        axes_map: {"z": "oz"}
    },
    affects: ["Camera"],
}
