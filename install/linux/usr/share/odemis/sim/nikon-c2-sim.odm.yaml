# Configuration to use just a Nikon C2
CONFOCAL: {
    class: Microscope,
    role: optical,
    children: ["Light", "Optical Objective", "Optical Emission Filter",
               "Galvano Mirror", "PMT1", "PMT2", "PMT3", "Pinhole",
               "Sample Stage", "Objective Stage", "Optical Focus"]
}

# Quanta SEM driven via external X/Y connection, using a DAQ board
"Nikon C2": {
    class: nikonc.CorbaC2,
    role: null,
    init: {
        host: "fake", # Use "fake" to use a simulator
        port: 6666,    
    },
    # detectors can be added or removed, up to 4
    children: {
        scanner: "Galvano Mirror",
        detector0: "PMT1",
        detector1: "PMT2",
        detector2: "PMT3",
        pinhole: "Pinhole",
    }
}

"Galvano Mirror": {
    # Internal child of Nikon C2, so no class
    role: laser-mirror,
#    role: e-beam,
    init: {
        hfw_nomag: 10.0e-3,  # m # The horizontal field of view if the lens is 1x
        #galvano_enabled: False,  # When "False", everything will behave the same
                                 # in software but the mirror will not move. 
    },
    affects: ["PMT1", "PMT2", "PMT3"] # affects the CCD in case of cathodoluminescence
}

"PMT1": {
    # Internal child of Nikon C2, so no class
    role: photo-detector0,
#    role: se-detector,
    init: {
        channel: 0,
    },
    metadata: {
        # TODO: put proper band info
        OUT_WL: [250.0e-9, 650.0e-9], # m
    }
}

"PMT2": {
    # Internal child of Nikon C2, so no class
    role: photo-detector1,
#    role: bs-detector,
    init: {
        channel: 2,
    },
    metadata: {
        OUT_WL: [250.0e-9, 650.0e-9], # m
    }
}

"PMT3": {
    # Internal child of Nikon C2, so no class
    role: photo-detector2,
    #role: cl-detector,
    init: {
        channel: 2,
    },
    metadata: {
        OUT_WL: [250.0e-9, 650.0e-9], # m
    }
}

"Pinhole": {
    # Internal child of Nikon C2, so no class
    role: pinhole,
}

Light: {
    class: simulated.Light,
    role: light,
    affects: ["PMT1", "PMT2", "PMT3"],
}

"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 100.0}, # ratio
    affects: ["PMT1", "PMT2", "PMT3"]
}

"Optical Emission Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[430.e-9, 480.e-9], [520.e-9, 600.e-9]]}, # m,m
    affects: ["PMT1", "PMT2", "PMT3"]
}

"Sample Stage": {
    class: simulated.Stage,
    role: stage,
    init: {axes: ["x", "y"]},
    affects: [Camera],
    properties: {
        speed: {'x':0.1, 'y':0.1} #m/s
    }
}

# Use 2 MultiplexActuators to separate the axes of the PIGCS over different roles
"Objective Stage": {
    class: actuator.MultiplexActuator,
    role: align,
    affects: [Camera],
    children: {"x": "Optical Stage", "y": "Optical Stage"},
    init: {
        axes_map: {"x": "x", "y": "y"},
    },
    properties: {
        speed: {'x': 0.1, 'y': 0.1} #m/s
    }
}

"Optical Focus": {
    class: actuator.MultiplexActuator,
    role: focus,
    affects: [Camera],
    children: {"z": "Optical Stage"},
    init: {
        axes_map: {"z": "z"}
    },
    properties: {
        speed: {'z': 0.1} #m/s
    }
}

"Optical Stage": {
    class: simulated.Stage,
    role: align,
    init: {axes: ["x", "y", "z"]},
}
