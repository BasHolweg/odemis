SECOM: {
    class: Microscope,
    role: brightfield,
    emitters: [Spectra, "Nikon Super Duper", "MultiBand Fixed Filter", EBeam],
    detectors: [Clara],
    actuators: ["Redstone Stage", "SEM-Optical Alignment", "OpticalZ actuator"],
}

Spectra: {
    class: lle.LLE,
    role: light,
    init: {
        port: "/dev/ttyLLE",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        # Values are quite approximate (only centre is pretty sure)
        sources: {"UV": [372.e-9, 382.e-9, 390.e-9, 398.e-9, 408.e-9],
                  "cyan": [465.e-9, 475.e-9, 485.e-9, 495.e-9, 505.e-9],
                  "green": [535.e-9, 545.e-9, 560.e-9, 575.e-9, 585.e-9],
                  "red": [637.e-9, 645.e-9, 650.e-9, 655.e-9, 663.e-9],
                 }
        },
    affects: [Clara],
}

EBeam: {
    class: simulated.EBeam,
    role: e-beam,
}

"Nikon Super Duper": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 40.0}, # ratio
    affects: [Clara]
}

"MultiBand Fixed Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[430.e-9, 480.e-9], [520.e-9, 600.e-9]]}, # m,m
    affects: [Clara]
}

# Axes: X is horizontal on screen (going left->right), physical left->right of sample when user is inserting the sample
#       Y is vertical going top-> bottom, physical: far->close from user looking from the top
Clara: {
    class: andorcam2.AndorCam2,
    role: ccd,
    init: {device: 0}, # the only Andor camera connected so always 0
    properties: {
        exposureTime: 0.3, # s
    }
}

# PI RedStone jumpers (.=off):
# X,Y = 1234...8
# X => Ch1
# Y => Ch2
# Axes should be synchronized with the camera
"Redstone Stage": {
    class: pi.StageRedStone,
    role: stage,
    affects: [Clara],
    init: {
        port: /dev/ttyS0, # serial port on the board
        # port: /dev/ttyPIRS, # USB serial port
        axes: {x: [0, 1], y: [0, 0]}, # axis -> controller, channel
        inverted: ["y"],
    }, 
    properties: {
        speed: {'x': 0.001, 'y': 0.001} #m/s
    }
}

# Use 2 CombinedActuators to separate the axes of the PIGCS over different roles
"SEM-Optical Alignment": {
    class: CombinedActuator,
    role: align,
    affects: [Clara],
    children: {"l": PIGCS, "r": PIGCS},
    init: {
        axes_map: {"l": "l", "r": "r"},
#        inverted: ["l"]
    },
    properties: {
        speed: {'l': 0.001, 'r': 0.001} #m/s
    }
}

# Z axis of focus: decreasing means "closer to the sample"
"OpticalZ actuator": {
    class: CombinedActuator,
    role: focus,
    affects: [Clara],
    children: {"z": PIGCS},
    init: {
        axes_map: {"z": "z"}
    },
    properties: {
        speed: {'z': 0.01} #m/s
    }
}

# PI E-861 jumpers (. = off):
# L = 1234.6..
# R = 123..6..
# Z = 12.4.6..

PIGCS: {
    class: pigcs.Bus,
    role: AlignAndFocus,
    init: {
        port: "/dev/ttyPIGCS",
        axes: {"l": [1, 1, False], "r": [2, 1, False], "z": [3, 1, False]} # axis -> controller, channel, closed-loop?
    },
}

