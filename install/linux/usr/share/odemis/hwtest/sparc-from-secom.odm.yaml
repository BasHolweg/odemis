# Fake SPARC configuration using the SECOM components. 
# Just for testing purposes.
SPARC-FAKE-TUD: {
    class: Microscope,
    role: sparc,
    children: ["EBeam ExtXY", "Nikon Lens", "SED ExtXY", "Clara", "MirrorMover", "OLStage"],
}

# Quanta SEM driven via external X/Y connection, using a DAQ board
"SEM ExtXY": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {scanner: "EBeam ExtXY", detector0: "SED ExtXY"}
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"EBeam ExtXY": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        # Use channels and limits to ensure the image has the same orientation
        # as in the SEM software.
        channels: [0, 1],
        limits: [[-3.1754, 3.1754], [-3.7, 3.7]],  # V
        park: [-5, -5], # V
        settle_time: 5.e-6, # s
        hfw_nomag: 0.25, # m
    },
    properties: {
        scale: [8, 8], # (ratio), start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 100, # (ratio), start low for a big field of view
    },
    affects: ["SED ExtXY", Clara] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI 0/AI GND
"SED ExtXY": { # aka ETD
    # Internal child of Quanta ExtXY, so no class
    role: se-detector,
    init: {
        channel: 0,
        limits: [-3, 3] # V (max values ever possible)
    },
}

"Nikon Lens": {
    class: static.OpticalLens,
    role: lens,
    init: {
       mag: 60.0, # ratio (actually of the complete light path)
       pole_pos: [458, 519], # (px, px), position of the pole (aka the hole in the mirror)
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
    },
    affects: [Clara]
}

# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
Clara: {
    class: andorcam2.AndorCam2,
    role: ccd,
    init: {
        device: 0, # the only Andor camera connected so always 0
        #transp: [-2, 1], # rotation by 90°
    }, 
    properties: {
        exposureTime: 0.3, # s
        # targetTemperature: -40, # °C
    }
}

MirrorMover: {
    class: pigcs.FakeBus,
    role: mirror,
    init: {
        port: "/dev/ttyPIGCS",
        # X/Y are same axes as SEM
        # yaw/pitch are axes according to Mirror's orientation
        # rz = yaw, ry = pitch (from Mirror's point of view)
        # axis -> controller, channel, closed-loop?
        axes: {"y":  [1, 1, False],
               "x":  [2, 1, False],
               "ry": [3, 1, False],
               "rz": [4, 1, False]},
        # inverted: ["y", "ry"],
        #dist_to_steps: {"x": 100000, "y": 100000}, # step/m
    },
    properties: {
        speed: {"x": 0.1, "y": 0.1, "rz": 0.1, "ry": 0.1} #m/s
    }
}

# USB should be connected to a E-861 or C-867
# PI E-861/C-867 jumpers (. = off):
# A = 1234.6..
# B = 123..6..
# Z = 12.4.6..
# X = 12...6.. (C-867)
# Y = 1.34.6.. (C-867)

PIGCS: {
    class: pigcs.Bus,
    role: null,
    init: {
        port: "/dev/ttyPIGCS",
        # axis -> controller, channel, closed-loop?
        axes: {"a": [1, 1, False], "b": [2, 1, False], "z": [3, 1, False],
               "x": [4, 1, True], "y": [5, 1, True]},
#         vmin: {"x": 2.4, "y": 2.8}, # V : lowest voltage which moves the actuators
#         speed_base: {"x": 0.02, "y": 0.02}, # m/s : speed at 3.5V
        # Z axis is linked to the lens with a ratio of ~4
        dist_to_steps: {"a": 100000, "b": 100000, "z": 400000}, # steps/m
    },
}

# Axes should be synchronized with the camera
# Stage axes are moving the sample, so they should opposite direction than convention
# (so the stage "position" is the current position observed)
"OLStage": {
    class: actuator.MultiplexActuator,
    role: stage,
    affects: [Clara, "EBeam ExtXY"],
    dependencies: {"x": PIGCS, "y": PIGCS},
    init: {
        axes_map: {"x": "x", "y": "y"},
        inverted: ["x", "y"],
    },
}


