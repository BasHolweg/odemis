# Configuration to simulate a SPARC system without having any hardware.
SimSPARC: {
    class: Microscope,
    role: sparc,
    emitters: ["EBeam ExtXY", "AR Lens", "FW102C"],
    detectors: ["SED ExtXY", "ARCam", "AndorSpec"],
    actuators: ["MirrorMover", "MFFLens", "MFFSelector"],
}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
#"SEM ExtXY": {
#    class: semcomedi.SEMComedi,
#    role: none,
#    init: {device: "/dev/comedi0"},
#    # more detectors can be added, if necessary
#    children: {scanner: "EBeam ExtXY", detector0: "SED ExtXY"}
#}
#
## Connect:
## X -> AO 0
## Y -> AO 1
## Ground -> AO GND
#"EBeam ExtXY": {
#    # Internal child of SEM ExtXY, so no class
#    role: e-beam,
#    init: {
#        channels: [1, 0],
#        limits: [[0, 5], [0, 5]],  # V
#        settle_time: 10.e-6, # s
#        hfw_nomag: 10.e-3, # m
#    },
#    properties: {
#        scale: [8, 8], # (ratio) : start with a pretty fast scan
#        dwellTime: 10.e-6, # s
#        magnification: 1000, # (ratio)
#    },
#    affects: ["SED ExtXY", SpecSimCam, ARCam] # affects the CCD in case of cathodoluminescence
#}
#
## Must be connected on AI 5/AI GND
#"SED ExtXY": { # aka ETD
#    # Internal child of Quanta ExtXY, so no class
#    role: se-detector,
#    init: {
#        channel: 0, # 0-> sawtooth waves, 1-> square waves
#        limits: [-3, 3] # V
#    },
#}

# This is a more realistic SEM simulator (image-wise, but less realistic HW-wise)
"SEM ExtXY": {
    class: simsem.SimSEM,
    role: none,
    init: {
           drift_period: 5, # s  (disable to get a the whole resolution of the image)
           image: "sparc-etd-gold-balls.h5",
    },
    # more detectors can be added, if necessary
    children: {scanner: "EBeam ExtXY",
               detector0: "SED ExtXY"
    }
}

"EBeam ExtXY": {
    # Internal child of SimSEM, so no class
    role: e-beam,
    init: {},
    properties: {
        dwellTime: 10.e-6, # s
    },
    affects: ["SED ExtXY", AndorSpec, ARCam] # affects the CCD in case of cathodoluminescence
}

"SED ExtXY": { # aka ETD
    # Internal child of SimSEM, so no class
    role: se-detector,
    init: {},
}


"AR Lens": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 0.4917, # ratio
           pole_pos: [458, 519], # (px, px), position of the pole (aka the hole in the mirror)
          }, 
    affects: ["ARCam"]
}

# Thorlabs MFF102 holding the lens
# The convention for the position is:
# 0째 (1)  -> no lens
# 90째 (2) -> lens
"MFFLens": {
    class: tlaptmf.MFF,
    role: lens-switch,
    init: {port: "/dev/fake", # for simulator
           #sn: "37848823", # Put the S/N for the real hardware
           axis: "rx",
           # inverted: ["rx"],
    },
    affects: ["AR Lens", "ARCam", "AndorSpec"]  
}

# Thorlabs FW102C with some filters
"FW102C": {
    class: tlfw.FakeFW102c,
    role: filter,
    init: {port: "/dev/ttyFTDI*", # will automatically find the right port
           bands: {1: [420.e-9, 460.e-9], # pos -> m,m
                   2: [500.e-9, 550.e-9], 
                   3: "polariser",
                   6: "pass-through"},
           },
    affects: ["ARCam", "AndorSpec"]
}

ARCam: {
    class: andorcam2.AndorCam2,
    role: ccd,
    init: {
       device: "fake",
       image: "sparc-ar-mirror-align.h5", # only for simulator
    },
}

# Thorlabs MFF102 holding the mirror to select AR or spectrometer
# The convention for the position is:
# 0째 (1)  -> AR
# 90째 (2) -> spectrometer
"MFFSelector": {
    class: tlaptmf.MFF,
    role: ar-spec-selector,
    init: {port: "/dev/fake", # for simulator
           #sn: "37848720",
           axis: "rx",
    },
    affects: ["ARCam", "AndorSpec"]  
}


#FakeSpec10: {
#    class: spectrometer.CompositedSpectrometer,
#    role: spectrometer,
#    children: {detector: "SpecSimCam",
#               spectrograph: "FakeSP2300i"
#              },
#    properties: {
#        binning: [4, 16],
#    },
#}
#
#SpecSimCam: {
#    class: andorcam2.FakeAndorCam2,
#    role: sp-ccd,
#    init: {device: 0,  # same as ARCam but it will actually be different device
#           image: "andorcam2-fake-clara.tiff", # only for simulator
#           }
#}
#
## Simulated SP-2300i, the spectrograph part of the Spec-10
#FakeSP2300i: {
#    class: spectrapro.FakeSpectraPro,
#    role: spectrograph,
#    affects: [SpecSimCam],
#    init: {
#        port: "/dev/ttySP",
#    },
#}

# Andor iDus 406 + Shamrock SR303i
AndorSpec: {
    class: andorshrk.AndorSpec, # Instantiates an Andorcam2 + Shamrock
    role: spectrometer,
    children: {andorcam2: "iDus", shamrock: "SR303i"},
    properties: {
        #binning: [4, 256],
    },
}

iDus: {
    # no class, as it's instantiated by AndorSpec
    role: sp-ccd,
    init: {
       device: "fake",
       image: "andorcam2-fake-clara.tiff", # only for simulator
    },
}

SR303i: {
    # no class, as it's instantiated by AndorSpec
    role: spectrograph,
    init: {
        device: "fake",
    },
}

MirrorMover: {
    class: pigcs.FakeBus,
    role: mirror,
    init: {
        port: "/dev/ttyPIGCS",
        # X/Y are same axes as SEM
        # yaw/pitch are axes according to Mirror's orientation
        # rz = yaw, ry = pitch (from Mirror's point of view)
        # axis -> controller, channel, closed-loop?
        axes: {"y":  [1, 1, False],
               "x":  [2, 1, False],
               "ry": [3, 1, False],
               "rz": [4, 1, False]},
        # inverted: ["y", "ry"],
        #dist_to_steps: {"x": 100000, "y": 100000}, # step/m
    },
    properties: {
        speed: {"x": 0.1, "y": 0.1, "rz": 0.1, "ry": 0.1} #m/s
    }
}

