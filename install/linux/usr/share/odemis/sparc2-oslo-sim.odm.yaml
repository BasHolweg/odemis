# Configuration for the SPARC2 system
SPARC2: {
    class: Microscope,
    role: sparc2,
    children: ["SEM E-beam", "SEM Detector", "Stage", "Slit", "Optical Path Properties",
    "Angular Camera", "Spectrometer", "CL Detector", "Mirror",
    "Lens1 Mover", "Lens2 Switch", "Filter Wheel"],
}


# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
       detector1: "CL PMT",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        channels: [1, 0],
        limits: [[0, 5], [0, 5]],  # V
        park: [0, 0], # V
        settle_time: 5.e-6, # s
        hfw_nomag: 0.25, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 100, # (ratio)
    },
    affects: ["SEM Detector", "Spectrometer", "Angular Camera"] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI 0/AI GND
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-3, 3] # V
    },
}

# CL PMT: composed of the control unit + the PMT output connected to the DAQ board

# Must be connected on AI 1/AI GND
"CL PMT": { # the raw detector of the PMT
    # Internal child of SEM Scan Interface, so no class but instead a creator
    creator: "SEM Scan Interface",
    role: null,
    init: {
        channel: 1, # 0-> sawtooth waves, 1-> square waves
        limits: [-5, 5] # V
    },
}

"CL PMT control unit": {
    class: pmtctrl.PMTControl,
    role: null,
    init: {
        port: "/dev/fake", # for simulator
        prot_time: 0.0002,  # s
        prot_curr: 50.e-6,  # A
    }
}

"CL Detector": {
    class: pmtctrl.PMT,
    role: cl-detector,
    children: {
       "detector": "CL PMT",
       "pmt-control": "CL PMT control unit",
    },
}

# Andor Zyla
#"Angular Camera": {
#    class: andorcam3.AndorCam3,
#    role: ccd,
#    init: {
#        device: 0,  # if a real camera is plugged in, it's usually 0
#        transpose: [1, -2], # mirrored on X axis
#    },
#    properties: {
#        fanSpeed: 0.0, # 0 = Off, 0.5= half speed, 1 = max speed
#    }
#}

"Angular Camera": {
    class: andorcam2.AndorCam2,
    role: ccd,
    init: {
       device: "fake",
       image: "sparc-ar-mirror-align.h5", # only for simulator
    },
}

"Spectral Camera": {
    class: andorcam2.AndorCam2,
    role: sp-ccd,
    init: {
       device: "fake",
       transpose: [1, -2], # if mirrored on X axis (due to a Odemis bug, it's the second dim which has the -)
    },
    properties: {
        targetTemperature: -60, # °C
    },
}

# Spectrometer = Andor iVac 316 + Shamrock SR193 (connected via USB)
"Spectrometer": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer,
    children: {detector: "Spectral Camera", spectrograph: "Spectrograph"},
    properties: {
        #binning: [4, 256],
    },
}

"Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph,
    affects: ["Spectral Camera"],
    children: {"ccd": "Spectral Camera"},
    init: {
        device: "fake",
        slits: {1: "slit-in", # INPUT_SIDE
        },
    },
}

"Optical Path Properties": {
    class: static.OpticalLens,
    role: lens,
    # Big mirror config
    init: {
       mag: 0.4917, # ratio
       pole_pos: [458, 519], # (px, px), position of the pole (aka the hole in the mirror)
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
    },
    # Small mirror config
    #init: {
    #   mag: 0.4917, # ratio
    #   pole_pos: [1280, 1080], # (px, px), position of the pole (aka the hole in the mirror)
    #   x_max: 10e-3,  # m, the distance between the parabola origin and the cutoff position
    #   hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
    #   focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
    #   parabola_f: 0.8e-3,  # m, parabola_parameter=1/4f
    #},
    affects: ["Angular Camera"]
}

# The first lens of Plate 1, able to move along the whole range
"Lens1 Mover": {
    class: actuator.MultiplexActuator,
    role: lens-mover,
    affects: ["Angular Camera"],
    children: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "x"}
    },
}

# The second lens of Plate 1, either to working or parking position
"Lens2 Switch": {
    class: actuator.FixedPositionsActuator,
    role: lens-switch,
    affects: ["Angular Camera"],
    children: {"x": "Optical Actuators"},
    init: {axis_name: "y",
           positions: {0: "on",
                     0.1: "off"},
           },
}

# Sets the slit position to either open or closed
"Slit": {
    class: actuator.FixedPositionsActuator,
    role: cl-det-selector,
    children: {"x": "Optical Actuators"},
    init: {axis_name: "z",
           positions: {0: "on",
                     0.1: "off"},
           },
}

# Controller for the motor moving the lenses in Plate 1, slit, mirror and Filter Wheel
"Optical Actuators": {
    class: tmcm.TMCM3110,
    role: none,
    init: {
        port: "/dev/fake",
        axes: ["x", "y", "z", "a", "b"],
        ustepsize: [5.9e-9, 5.9e-9, 5.9e-9, 5.9e-9, 5.9e-9], # m/µstep
        refproc: "FakeReferencing", # referencing procedure for simulator
        temp: True,
    },
}

# Redux stage
"Stage": {
    class: actuator.MultiplexActuator,
    role: stage,
    affects: ["Angular Camera"],
    children: {"x": "Stage Actuators", "y": "Stage Actuators"},
    init: {
        axes_map: {"x": "x", "y": "y"},
    },
}

# Controller for moving the Redux stage
"Stage Actuators": {
    class: tmcm.TMCM3110,
    role: none,
    init: {
        port: "/dev/fake",
        axes: ["x", "y", "z"],
        ustepsize: [5.9e-9, 5.9e-9, 5.9e-9], # m/µstep
        refproc: "FakeReferencing", # referencing procedure for simulator
        temp: True,
    },
}

"Filter Wheel": {
    class: actuator.FixedPositionsActuator,
    role: filter,
    children: {"x": "Optical Actuators"},
    init: {axis_name: "a",
           positions: {0: [420.e-9, 460.e-9], # pos -> m,m
                   1: [500.e-9, 550.e-9],
                   2: "polariser",
                   5: "pass-through"},
           cycle: 6
           },
    affects: ["Angular Camera", "Spectrometer", "CL Detector"]
}

# Mirror in Plate 2, selects between spectrometer and cl-detector
"Mirror": {
    class: actuator.FixedPositionsActuator,
    role: cl-det-selector,
    children: {"x": "Optical Actuators"},
    init: {axis_name: "b",
           positions: {0: "on",
                     0.1: "off"},
           },
    affects: ["Angular Camera", "Spectrometer", "CL Detector"]
}

#TODO add support for Power Control Unit
