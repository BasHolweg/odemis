SimSECOM: {
    class: Microscope,
    role: secom,
    emitters: [Spectra, "Nikon Super Duper", "MultiBand Fixed Filter", "EBeam ExtXY"],
    detectors: ["Andor SimCam", "SED ExtXY"],
    actuators: ["OLStage", "SEM-Optical Alignment", "OpticalZ actuator"],
}

#Light: {
#    class: simulated.Light,
#    role: brightlight,
#    affects: ["Andor SimCam"],
#    properties: {
#        power: 100 # W
#    }
#}

Spectra: {
    class: lle.FakeLLE,
    role: light,
    init: {
        port: "/dev/ttyLLE",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        # Values are quite approximate (only centre is pretty sure)
        sources: {"UV": [372.e-9, 382.e-9, 390.e-9, 398.e-9, 408.e-9],
                  "cyan": [465.e-9, 475.e-9, 485.e-9, 495.e-9, 505.e-9],
                  "green": [535.e-9, 545.e-9, 560.e-9, 575.e-9, 585.e-9],
                  "red": [637.e-9, 645.e-9, 650.e-9, 655.e-9, 663.e-9],
                 }
        },
    affects: ["Andor SimCam"],
}

# This is a very simple SEM simulator, without detector
#EBeam: {
#    class: simulated.EBeam,
#    role: e-beam,
#}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo chmod a+rw /dev/comedi0
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000

"SEM ExtXY": {
    class: semcomedi.SEMComedi,
    role: none,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {scanner: "EBeam ExtXY", detector0: "SED ExtXY"}
}

"EBeam ExtXY": {
    # Internal child of Quanta ExtXY, so no class
    role: e-beam,
    init: {
        channels: [0, 1],
        limits: [[0, 5], [0, 5]],  # V
        settle_time: 10.e-6, # s
        hfw_nomag: 10.e-3, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 1.e+3, # (ratio)
    },
    affects: ["SED ExtXY", "Andor SimCam"] # affects the CCD in case of cathodoluminescence
}

"SED ExtXY": { # aka ETD
    # Internal child of Quanta ExtXY, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-3, 3] # V
    },
}

"Nikon Super Duper": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 10.0}, # ratio
    affects: ["Andor SimCam"]
}

"MultiBand Fixed Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[420.e-9, 460.e-9],
                  [510.e-9, 532.e-9], 
                  [590.e-9, 624.e-9],
                  [677.e-9, 723.e-9]]}, # m,m
    affects: ["Andor SimCam"]
}

# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
"Andor SimCam": {
    class: andorcam2.FakeAndorCam2,
    role: ccd,
    init: {device: 0,
           transpose: [-2, 1], # rotated 90Â° clockwise
          }
}

"OLStage": {
    class: simulated.Stage,
    role: stage,
    init: {axes: [x, y]},
    affects: ["Andor SimCam", "EBeam ExtXY"],
    properties: {
        speed: {x: 0.1, y: 0.1} #m/s
    }
}

# Use 2 CombinedActuators to separate the axes of the PIGCS over different roles
"SEM-Optical Alignment": {
    class: CombinedActuator,
    role: align,
    affects: ["Andor SimCam"],
    children: {"a": PIGCS, "b": PIGCS},
    init: {
        axes_map: {"a": "a", "b": "b"},
#        inverted: ["a"]
    },
    properties: {
        speed: {'a': 0.001, 'b': 0.001} #m/s
    }
}

# Axis Z: (Physical) bottom->top when looking at the door
#         (On screen) bottom->top (so distance to sample is smaller when going up)    
"OpticalZ actuator": {
    class: CombinedActuator,
    role: focus,
    affects: ["Andor SimCam"],
    children: {"z": PIGCS},
    init: {
        axes_map: {"z": "z"}
    },
    properties: {
        speed: {'z': 0.1} #m/s
    }
}

# USB should be connected to a E-861 or C-867
# PI E-861/C-867 jumpers (. = off):
# A = 1234.6..
# B = 123..6..
# Z = 12.4.6..

PIGCS: {
    class: pigcs.FakeBus,
    role: none,
    init: {
        port: "/dev/ttyPIGCS",
        # axis -> controller, channel, closed-loop?
        axes: {"a": [1, 1, False], "b": [2, 1, False], "z": [3, 1, False]},
    },
}

