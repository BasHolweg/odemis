SECOM: {
    class: Microscope,
    role: secom,
    emitters: [Spectra, "Nikon Lens", "MultiBand Fixed Filter", "EBeam ExtXY"],
    detectors: [Clara, "SED ExtXY"],
    actuators: ["OLStage", "SEM-Optical Alignment", "OpticalZ actuator"],
}

Spectra: {
    class: lle.LLE,
    role: light,
    init: {
        port: "/dev/ttyLLE",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        # Values are quite approximate (only centre is pretty sure)
        sources: {"UV": [372.e-9, 382.e-9, 390.e-9, 398.e-9, 408.e-9],
                  "cyan": [465.e-9, 475.e-9, 485.e-9, 495.e-9, 505.e-9],
                  "green": [535.e-9, 545.e-9, 560.e-9, 575.e-9, 585.e-9],
                  "red": [637.e-9, 645.e-9, 650.e-9, 655.e-9, 663.e-9],
                 }
        },
    affects: [Clara],
}

# Quanta SEM driven via external X/Y connection, using a DAQ board
"SEM ExtXY": {
    class: semcomedi.SEMComedi,
    role: none,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {scanner: "EBeam ExtXY", detector0: "SED ExtXY"}
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"EBeam ExtXY": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        channels: [1, 0],
        limits: [[0, 5], [0, 5]],  # V
        settle_time: 10.e-6, # s
        hfw_nomag: 10.e-3, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 1000, # (ratio)
    },
    affects: ["SED ExtXY", Clara] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI 5/AI GND
"SED ExtXY": { # aka ETD
    # Internal child of Quanta ExtXY, so no class
    role: se-detector,
    init: {
        channel: 5,
        limits: [-3, 3] # V
    },
}

"Nikon Lens": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 60.0}, # ratio (actually of the complete light path)
    affects: [Clara]
}

"MultiBand Fixed Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[430.e-9, 480.e-9], [520.e-9, 600.e-9]]}, # m,m
    affects: [Clara]
}

# Axes: X is horizontal on screen (going left->right), physical left->right of sample when user is inserting the sample
#       Y is vertical going top-> bottom, physical: far->close from user looking from the top
Clara: {
    class: andorcam2.AndorCam2,
    role: ccd,
    init: {device: 0}, # the only Andor camera connected so always 0
    properties: {
        exposureTime: 0.3, # s
    }
}

# Use 3 CombinedActuators to separate the axes of the PIGCS over different roles

# Axes should be synchronized with the camera
"OLStage": {
    class: CombinedActuator,
    role: stage,
    affects: [Clara, "EBeam ExtXY"],
    children: {"x": PIGCS, "y": PIGCS},
    init: {
        axes_map: {"x": "x", "y": "y"},
#        inverted: ["x"]
    },
    properties: {
        speed: {'x': 0.001, 'y': 0.001} #m/s
    }
}

"SEM-Optical Alignment": {
    class: CombinedActuator,
    role: align,
    affects: [Clara],
    children: {"a": PIGCS, "b": PIGCS},
    init: {
        axes_map: {"a": "a", "b": "b"},
#        inverted: ["a"]
    },
    properties: {
        speed: {'a': 0.001, 'b': 0.001} #m/s
    }
}

# Z axis of focus: increasing means "closer to the sample"
"OpticalZ actuator": {
    class: CombinedActuator,
    role: focus,
    affects: [Clara],
    children: {"z": PIGCS},
    init: {
        axes_map: {"z": "z"}
    },
    properties: {
        speed: {'z': 0.01} #m/s
    }
}

# USB should be connected to a E-861 or C-867
# PI E-861/C-867 jumpers (. = off):
# A = 1234.6..
# B = 123..6..
# Z = 12.4.6..
# X = 12...6.. (C-867)
# Y = 1.34.6.. (C-867)

PIGCS: {
    class: pigcs.Bus,
    role: none,
    init: {
        port: "/dev/ttyPIGCS",
        # axis -> controller, channel, closed-loop?
        axes: {"a": [1, 1, False], "b": [2, 1, False], "z": [3, 1, False],
               "x": [4, 1, False], "y": [5, 1, False]},
        vmin: {"x": 2.4, "y": 2.}, # V : lowest voltage which moves the actuators
        #speed_base: {"x": 30., "y": 30.}, # m/s : speed at 3.5V
    },
}

