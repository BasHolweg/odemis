How to extend Odemis

Depending on how you want to extend Odemis, there are different ways to modify
it. First have a look at the first three sections, and then read the additional
sections depending on the goal you have.

Please note that almost all source code is released under the GPLv2 license.
This means in very broad terms that any modification or extension you make to it
will have to either be kept internal or also be made freely available to anyone.
See LICENSE.txt for the complete and official text of the license.

Moreover, if you have a microscope from Delmic, the maintenance contract only
supports the original version of the Odemis software. Modified versions of the
software are not covered by the maintenance contract (unless explicitly stated).
If you share your extension with Delmic and we decide to integrate them into a
later version of Odemis, then the contract will also cover the extension.

= Recommended development environment =

Ubuntu 12.04 (x86 32 bits, preferably with kernel 3.5 aka linux-generic-lts-quantal)
Eclipse + PyDev plug-in + Pylint
XRCed (package python-wxtools) for GUI edition

Source code available at: git clone git@github.com:delmic/odemis.git

Note that Odemis can run in fully simulated mode, where no actual hardware is
needed. In this case, it can run in a virtual machine.

== Detailed instructions ==

Download Ubuntu 12.04 at this address:
http://www.ubuntu.com/download/desktop/thank-you?release=lts&bits=32&distro=desktop&status=zeroc

Install it by which ever way you prefer, following these instructions:
http://www.ubuntu.com/download/desktop/install-desktop-long-term-support

Once logged into your newly installed Ubuntu system:
 * Start a terminal (with Ctrl+Alt+T) and type:
sudo add-apt-repository ppa:delmic-soft/odemis
sudo apt-get update
sudo apt-get dist-upgrade
sudo apt-get install git imagej vim hdfview meld libtiff-tools gimp libhdf5-serial-1.8.4 python-pyro4-delmic odemis fluodb python-wxtools python-setuptools
sudo adduser $(whoami) odemis
mkdir development
cd development
git clone git@github.com:delmic/odemis.git

 * Edit /etc/odemis.conf with:
sudo gedit /etc/odemis.conf

 Modify the first lines so they read like this:
DEVPATH="$HOME/development"
PYTHONPATH="$DEVPATH/odemis/src/:$PYTHONPATH"

 And edit the MODEL line for the model you want (probably a simulated microscope
 like sparc-sim or secom-sim). For example:
MODEL="$CONFIGPATH/sparc-sim.odm.yaml"

 * Install Eclipse and the plugins:
sudo easy_install pylint
cd
mkdir usr
cd usr
wget http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/kepler/SR1/eclipse-standard-kepler-SR1-linux-gtk.tar.gz
tar xf eclipse-standard-kepler-SR1-linux-gtk.tar.gz
~/usr/eclipse/eclipse
 
 Go to Help/Marketplace...
 Search for PyDev, and install it.
 Optionally, you can also install "Eclipse Color Theme" and "hunspell4eclipse".
 

 In the Eclipse preference window, go to PyDev/PyLint and as location of the 
 pylint executable, indicate your lint.py, which is approximately at this place:
/usr/local/lib/python2.7/dist-packages/pylint-1.0.0-py2.7.egg/pylint/lint.py

 * Edit Odemis with Eclipse:
 Click on File/New/PyDev Project
 Enter "odemis" as project name
 Select a directory for project contents: the place where Odemis was downloaded
 (/home/.../development/odemis)
 Select "Create 'src' folder and add it to the PYTHONPATH"
 Click on Finish

= Overview of Odemis architecture =

Odemis is composed of three distinct layers:

 * The drivers: many independent modules which are each an adapter between a
   hardware component and the rest of Odemis, following a programming
   interface (with specificities for each type of the hardware).
   The code is found in the drivers/ directory.

 * The back-end: it is the core of Odemis and is in charge of connecting the
   various drivers together according to a configuration file. It provides a
   uniform view of the microscope (independently of the actual hardware
   components) to the next layer.
   The code is found in the odemisd/ directory.

 * The user interface layer: it allows the user to manipulate the microscope and
   displays the acquired data. The usual user interface is the Graphical User
   Interface (GUI) but there could be other user interface, such as simple
   command line version.
   The code is found in the directory corresponding to the interface. For the
   GUI, the code is in the gui/ directory.
   Another user interface is the command-line interface (CLI). It allows basic
   manipulation of the microscope via a terminal, or in a script. The code is
   found in the cli/ directory.

Additionally, every directory contains a test/ directory which contains various
Python test classes used to validate the behaviour of the program.


= Supporting new hardware =

Add a module to the drivers/ directory following the interface for the specific
type of component (see the back-end specification).

Add a test class to the test directory which instantiates the component and at
least detects whether the component is connected or not (scan() and selfTest()
methods) and does basic tasks (e.g., acquiring an image or moving an actuator).

Update the configuration file for instantiating the microscope with the
parameters for your new driver.

Commit your code using "git add ..." and "git commit -a".

Optionally, send your extension to Delmic as a git patch or fork.


= Automating the acquisition of data =

There are several ways to automate the data acquisition. There are mostly a
trade-off between simplicity of development and complexity of the task to
automate.

For the easiest tasks, a shell script calling the cli program might be the
most appropriate way. See the CLI help command for a list of all possible
commands ("odemis-cli --help").

For more complex tasks, it might be easier to write a specialised python program.
In this case, the program directly access the backend. A good way to start is to
look at the source code of the CLI. It shows examples of the most common tasks.

Alternatively you may want to add the automated task as one option to the GUI.
See later section about extending the GUI.


= Fixing a bug =

Like every complex piece of software, Odemis contains bugs, even though we do
our best to minimize their amount. In the event you are facing a bug, we advise
you first to report it to us (bugreport@delmic.com). We might have already solved it
or might be able to fix it for you. If neither of these two options work out,
you can try to fix it yourself. When reporting a bug, please include a
description of what is happening compared to what you expect to happen, the log
files and screen-shots if relevant.

If you try to solve a bug by yourself, the first step is to download the latest
version of Odemis via git.  For this you can do in a terminal:
git clone git@github.com:odemis/odemis.git
git clone git@github.com:odemis/Pyro4.git

The next step is to locate the bug. Have a look at the log files. You can add
"--log-level=2" as a start-up parameter to increase the verbosity. It's also
possible to run either odemisd (and the drivers, with the "--debug" parameter)
or the GUI from Eclipse. You can then run in debug mode, place breakpoints,
observe the value of variables and modify the code.

Once the bug fixed, commit your code using "git add ..." and "git commit -a",
and send us the patch for inclusion in the next version of Odemis.


= Adding a feature to the Graphical User Interface =

To edit the interface, you should use XRCed, by typing this (with the right paths):
PYTHONPATH=./src/:../Pyro4/src/:/usr/local/lib/python2.7/dist-packages/wx-2.9.4-gtk2/wx/tools python src/odemis/gui/launch_xrced.py

If you add/modify an image in src/odemis/gui/img, you need to regenerate the data.py file:
sudo apt-get install pngcrush # on the first use
cd src/odemis/gui/img
./images2python

= Generating Documentation =

Note: The information here should probably be used to create a shell script
that can install Sphinx and build/update the documentation with one simple
command.

#. Install the python documentation generator called Sphinx:
   `sudo apt-get install python-sphinx`. Make sure it's version 1.1.3 or later.
#. If `conf.py` is missing from odemis/doc/code, run `sphinx-quickstart` to
   create it.
#. Make sure odemis and Pyro are present in the Python path.
#. Run  `sphinx-apidoc -f -o <path to odemis>/doc/code/_gen <path to odemis>/src/"
   This will extract all doc strings from the source code and store them in .rst
   files located at odemis/doc/code/_gen
#. Run `make html` from the <path to odemis>/doc/code directory.
   This command will transform the .rst files present in odemis/doc/code and
   odemis/doc/code/_gen into html files. These files will be stored in
   odemis/doc/code/_build.

*Important note:* Hand-made documentation files should be stored in
odemis/doc/code and odemis/doc/code/_gen should *only* contain automatically
generated files!

= Improving the speed =
First, you need to profile the code to see where is the bottleneck.
PYTHONPATH=./src/:../Pyro4/src/ python -m cProfile -o odemis.profile src/odemis/gui/main.py
# run the typical usage you want to measure

python -m pstats odemis.profile
> sort time
> stats

