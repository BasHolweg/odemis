How to extend Odemis

Depending on how you want to extend Odemis, there are different ways to modify 
it. First have a look at the first three sections, and then read the additional 
sections depending on the goal you have.

Please note that almost all source code is released under the GPLv2 license. 
This means in very broad terms that any modification or extension you make to it 
will have to either be kept internal or also be made freely available to anyone. 
See LICENSE.txt for the complete and official text of the license.

Moreover, if you have a microscope from Delmic, the maintenance contract only
supports the original version of the Odemis software. Modified versions of the
software are not covered by the maintenance contract (unless explicitly stated).
If you share your extension with Delmic and we decide to integrate them into a
later version of Odemis, then the contract will also cover the extension.

= Recommended development environment =

Ubuntu 12.04 (32 bits)
Eclipse + PyDev plug-in + Pylint

= Downloading the source code =

git clone git@github.com:pieleric/odemis.git

= Overview of Odemis architecture =

Odemis is composed of three distinct layers:

 * The drivers: many independent modules which are each an adapter between a 
   hardware component and the rest of Odemis, following a specific programming
   interface (which depends on the type of the hardware).
   The code is found in the drivers/ directory.

 * The back-end: it is the core of Odemis and is in charge of connecting the 
   various drivers together according to a configuration file. It provides a 
   uniform view of the microscope (independently of the actual hardware 
   components) to the next layer.
   The code is found in the odemisd/ directory.

 * The user interface layer: it allows the user to manipulate the microscope and
   displays the acquired data. The usual user interface is the Graphical User
   Interface (GUI) but there could be other user interface, such as simple 
   command line version.
   The code is found in the directory corresponding to the interface. For the 
   GUI, the code is in the gui/ directory.
   
Additionally, every directory contains a test/ directory which contains various
Python test classes used to validate the behaviour of the program.


= Supporting new hardware = 

Add a module to the drivers/ directory following the interface for the specific 
type of component (see the back-end specification). 

Add a test class to the test directory which instantiates the component and at
least detects whether the component is connected or not (scan() and selfTest()
methods) and does basic tasks (e.g., acquiring an image or moving an actuator). 

Update the configuration file for instantiating the microscope with the 
parameters for your new driver.

Commit your code using "git add ..." and "git commit -a".

Optionally, send your extension to Delmic as a git patch or fork. 


= Automating the acquisition of data =

Write a new user interface (in Python) which does the tasks you want.

Alternatively you may want to add the automated task as one option to the GUI.
See later section about extending the GUI.


= Fixing a bug =

Like every complex piece of software, Odemis contains bugs, even though we do
our best to minimize their amount. In the event you are facing a bug, we advise
you first to report it to us (info@delmic.com). We might have already solved it
or might be able to fix it for you. If neither of these two options work out,
you can try and fix it yourself. When reporting a bug, please include a
description of what is happening compared to what you expect to happen, the log
files and screen shots if relevant.

If you try to solve a bug by yourself, the first step is to download the latest
version of Odemis via git.  For this you can do in a terminal: git clone
git@github.com:pieleric/odemis.git

The next step is to locate the bug.  Have a look at the log files. You can add
"--log-level=2" as a start-up parameter to increase the verbosity. It's also
possible to run either odemisd (and the drivers) or the GUI from Eclipse. You
can then run in debug mode, place breakpoints, observe the value of variables
and modify the code.

Once the bug fixed, commit your code using "git add ..." and "git commit -a", 
and send us the patch for inclusion in the next version of Odemis.


= Adding a feature to the Graphical User Interface =

