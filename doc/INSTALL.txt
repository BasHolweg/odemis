How to install Odemis


= Installing the dependencies =

You need Ubuntu 12.04 (x86 - 32 bits).
sudo apt-get install python-imaging python-yaml python-gdal python-serial python-zmq python-concurrent.futures python-scipy python-decorator cgroup-bin python-libtiff python-comedilib python-h5py libhdf5-serial-1.8.4 

wxPython 2.9 is also required, but it has to be built form source as described
in the following section.

python-h5py version 2.1 is required. It can be built from source as described in
its specific section.

== wxPython 2.9 ==

Installing wxpython 2.9

- Download wxPython 2.9.4.0 source code
    wget http://downloads.sourceforge.net/project/wxpython/wxPython/2.9.4.0/wxPython-src-2.9.4.0.tar.bz2?r=&ts=1345106877&use_mirror=switch -O wxPython-src-2.9.4.0.tar.bz2
- Download the 2.9.4.1 patch file into /wxPython-src-2.9.4.0
    wget http://sourceforge.net/projects/wxpython/files/wxPython/2.9.4.0/wxPython-src-2.9.4.1.patch/download -O wxPython-src-2.9.4.1.patch
- Unpack and patch the source:
tar xf wxPython-src-2.9.4.0.tar.bz2
cd wxPython-src-2.9.4.0/
patch -p0 -i ../wxPython-src-2.9.4.1.patch

- Make sure the following dependencies are installed:
sudo apt-get install libgtk2.0-dev freeglut3 freeglut3-dev freeglut3-dbg libgl1-mesa-glx libglu1-mesa libgl1-mesa-dev libglu1-mesa-dev libgstreamer0.10-dev libgconf2-dev libsdl1.2-dev zlib1g-dev libjpeg-dev libtiff4-dev python-gst0.10-dev python-dev

- Compile:
cd wxPython
sudo python2.7 build-wxpython.py --build_dir=../build --install

- *important!* Update library database:
sudo ldconfig

Optionally, if you want to modify the graphical user interface, you need to
make the following preparation concerning XRCEd. (XRCED is the GUI editor of
choice.)

- Find the location where you Python packages are installed:
    cd $(python -c "import wx; import os; print os.path.dirname(wx.__file__)")
- Goto the XRCED directory
    cd tools/XRCed/plugins
- Create symbolic links to xh_delmic.py and delmic.py files in the
  odemis/gui/xmlh directory.
    sudo ln -s <path to odemis root dir>/gui/xmlh/xh_delmic.py
    sudo ln -s <path to odemis root dir>/gui/xmlh/delmic.py

= H5Py 2.1 =
This is require to support DimensionScales.

sudo apt-get install libhdf5-serial-dev cython
git clone git://github.com/h5py/h5py.git
cd h5py/h5py
python api_gen.py
cd ..
python setup.py build
sudo python setup.py install

= Installing Comedi =
Used to access the DAQ board to connect to the SEM. The version of comedi
provided in Ubuntu 12.04 is version 0.8. It should work, but if not you can also
try to upgrade to 0.10. See below for the instructions. The driver is only
tested on the NI PCI 6251, and will only work on a NI board or the simulator
(adaptation for other boards should be light, as long as Comedi support
synchronous input/output).

Once Comedi is installed. You need to calibrate the DAQ board (about once per year).

For the NI PCI 6251:
sudo comedi_soft_calibrate -f /dev/comedi0

For some other boards, which are calibrated in hardware, you need to do:
sudo comedi_calibrate -f /dev/comedi0

== Installing comedilib 0.10.1 ==
git clone git://comedi.org/git/comedi/comedilib.git
sudo apt-get install autoconf libltdl-dev flex byacc python-dev swig
cd comedilib
./autogen.sh
./configure
make -j
sudo make install

== Installing comedi_calibrate ==
git clone git://comedi.org/git/comedi/comedi_calibrate.git
sudo apt-get install libboost-dev libboost-program-options-dev libgsl0-dev
cd comedi_calibrate
./autogen.sh
./configure
make -j
sudo make install

== Installing pycomedi ==
git clone git://tremily.us/pycomedi.git
sudo apt-get install python-comedilib comedi-dev python-nose cython
cd pycomedi
sudo python setup.py install

== Loading the comedi simulator driver ==
Needs to be done after every boot.
sudo modprobe comedi comedi_num_legacy_minors=4
sudo modprobe comedi_test
sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000


= Installing Odemis =

Download the source code:
cd ~/development
git clone git@github.com:delmic/Pyro4.git
git clone git@github.com:delmic/odemis.git

Create a "odemis" group and add all the necessary users to it:
sudo addgroup odemis
sudo adduser replace_by_login_name odemis

(You need to log out to get the user in the new group)

On Linux, install the files this way:
cd odemis
sudo cp -dr --preserve=mode,xattr,timestamps install/linux/* /


= Installing the vendor device drivers =

== Andor Clara camera ==

Note that it's recommended to plug the USB cable to a separate USB hub (to
ensure full bandwidth availability). To check this you can use:
lsusb -t

- Install the driver:
  WARNING! no version works fully, but if we create a Frankenstein one, it does:
  * v2.93 (and v2.91+) doesn't work because it blocks after a few image acquired
  * v2.90 doesn't support changing the preamp gain
  * The firmware of v2.90 (/usr/local/etc/andor) and code from v2.93
    (/usr/local/lib) works (but use 100% of CPU when acquiring images):

  cd andor-2.93
  sudo ./install_andor  # Install "5 (All USB products)"
  cd ../andor-2.90
  sudo install etc/* /usr/local/etc/andor/


On Linux/Ubuntu you need to install libusb-dev (or have a link from libusb.so to
libusb-0.1.so.4).

Also the the permissions of all the files must be allowed for normal user:
everything is installed by default as root only, so nothing can work from the
normal user account. See /usr/local/*/*andor*
TODO: come up with a nice command to change the owner of those files.
Finally, fix /etc/udev/rules.d/andor.rules to read as:
ATTRS{idVendor}=="136e", MODE="0666"

For example:
sudo gedit /etc/udev/rules.d/andor.rules
# add the line and save the file
sudo udevadm control --reload-rules


== Andor Neo camera (used for camera simulator too) ==

- Install Andor SDK v3.1 (3.3 does *not* work for simulator).

On Linux, the bitflow driver has to be reinstalled (recompiled) each time the
kernel is updated.

== Physik Instrumente C-170 (Redstone) piezo-motor controllers ==

Nothing specific. Make sure that the normal user has permissions to access the
serial port. For example, if it is a USB serial port adapter check the
permissions of /dev/ttyUSB0. Typically, you need to do this:
sudo adduser replace_by_login_name dialout

For Linux: make sure you copy the content of install/linux/ to / and run:
sudo udevadm control --reload-rules

== Physik Instrumente E-861 piezo-motor controllers ==

Nothing specific. Plug one via the USB cable to the computer and the other ones
in daisy chain to each other. At least one of the controller must have address
1.

For Linux: make sure you copy the content of install/linux/ to /:
sudo install install/linux/etc/udev/rules.d/99-pi-fixed.rules /etc/udev/rules.d/
and run:
sudo udevadm control --reload-rules

On old versions of Linux (before 3.2.7), you need to create a file
/etc/udev/rules.d/99-usbftdi.rules with:
SUBSYSTEMS=="usb", ATTRS{idProduct}=="1008", ATTRS{idVendor}=="1a72", RUN+="/sbin/modprobe -q ftdi-sio product=0x1008 vendor=0x1a72"

= Configuring the instantiation file =
This file describes the available hardware for Odemis. Basically, it lists for each
hardware, which driver to use and the parameters required. It's following the 
YAML format (similar to JSON). See the back-end specification for precise syntax
and example files.

